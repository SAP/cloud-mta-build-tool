# Golang CircleCI 2.0 configuration
version: 2.1
jobs:

  build-node:
    docker:
      - image: circleci/node:16
    working_directory: ~/repo
    steps:
      - checkout
      # `--ignore-scripts` is needed to avoid running the tests before
      # the `prepare` script created the binary wrapper in `./bin/mbt`
      - run: npm install --ignore-scripts
      - run: npm run ci

  build:
    docker:
      - image: cimg/go:1.16

    environment:
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run: go version
      - run: go env
      - run:
          name: install dependencies
          command: |
            go mod vendor
      - run: go test -v ./...
      - run: sudo chown circleci:circleci $GOPATH/bin
      - run: make tools
      - run: make lint
      - run:
          name: cov install coverge deps
          command: |
            go get golang.org/x/tools/cmd/cover
            go get golang.org/x/net/html/charset
            go get github.com/mattn/goveralls
            go get github.com/modocache/gover
            go install github.com/mattn/goveralls
            go install github.com/modocache/gover
            go get golang.org/x/crypto/ssh/terminal
      - run: go test -v ./... -coverprofile=mta.coverprofile
      - run: gover
      - run: goveralls -v -service=circle-ci -coverprofile=gover.coverprofile -repotoken $COVERALLS_TOKEN

  test:
    docker:
      - image: shimit/mbt_multi:0.3.0
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            go mod vendor
      - run: cf login -a $CF_API -o $ORG -s $SPACE -u $TECH_USER -p $TECH_PASS
      - run: cd integration &&  go test -tags=integration

  compliance:
    docker:
      - image: cimg/python:3.10.0
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run:
          name: compliance check
          command: |
            pip3 install --user reuse
            ~/.local/bin/reuse lint
            
  release:
    docker:
      - image: cimg/go:1.16
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c3:2b:e9:bb:d5:05:32:ab:df:ce:2b:c3:e5:f7:95:42"
      - checkout
      - run:
          name: install dependencies
          command: |
            go mod vendor
      - run:
          name: bump version
          command: |
            #Make sure HEAD points to master
            echo "Release processed by ${CLOUD_MTA_BOT_EMAIL}/${CLOUD_MTA_BOT_USER}"
            git checkout master
            CURR_MBT_VERSION=$(cat ./VERSION)
            echo "Current release: ${CURR_MBT_VERSION}"
            MBT_VERSION=$(echo $CURR_MBT_VERSION |awk -F. -v MAJOR_VAR="$MAJOR" -v MINOR_VAR="$MINOR" -v PATCH_VAR="$PATCH" '{
              if (MAJOR_VAR == "true"){
                $1++
                $2=0
                $3=0
              } else if (MINOR_VAR == "true"){
                $2++
                $3=0
              } else if (PATCH_VAR == "true"){
                $3++
              } 
              printf "%d.%d.%d\n", $1, $2 ,$3 
            }')
            echo "New release: ${MBT_VERSION}"
            #Update new version in files
            sed  -i "/\"version\":/s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./package.json
            sed  -i "/cli_version:/s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./configs/version.yaml
            sed  -i "s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./VERSION
            sed  -i "/ARG MBT_VERSION=/ s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./Dockerfile_mbtci_alpine
            sed  -i "/ARG MBT_VERSION=/ s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./Dockerfile_mbtci_java8
            sed  -i "/ARG MBT_VERSION=/ s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./Dockerfile_mbtci_java11
            sed  -i "/ARG MBT_VERSION=/ s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./Dockerfile_mbtci_java17
            sed  -i "s/- ${CURR_MBT_VERSION}/- ${MBT_VERSION}/" ./test/goss/goss_template.yaml
            sed  -i "/- Cloud MTA Build Tool -/s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./README.md
            #Generate version file
            go generate -run "go run ./internal/buildtools/embed.go ./internal/buildtools/buildtools_msg.go -source=./configs/version.yaml -target=./internal/version/version_cfg.go -name=VersionConfig -package=version"
            #Add all updated files to commit
            git add ./package.json ./configs/version.yaml ./VERSION ./internal/version/version_cfg.go ./Dockerfile_mbtci_alpine ./Dockerfile_mbtci_java8 ./Dockerfile_mbtci_java11 ./Dockerfile_mbtci_java17 ./test/goss/goss_template.yaml ./README.md 
            git config user.email "${CLOUD_MTA_BOT_EMAIL}"
            git config user.name "${CLOUD_MTA_BOT_USER}"
            git commit --allow-empty -m "[skip ci] Bump version ${MBT_VERSION}"
            #Push commit directly to master
            git push -q https://github.com/SAP/cloud-mta-build-tool.git master
            #Tag
            git tag -a v${MBT_VERSION} -m "New release ${MBT_VERSION}"
            git push https://github.com/SAP/cloud-mta-build-tool.git v${MBT_VERSION}
      - run:
          name: release new version
          command: |
            #Make sure HEAD points to master
            git checkout master
            export GITHUB_TOKEN=${CLOUD_MTA_BOT_GITHUB_TOKEN}
            curl -sL https://git.io/goreleaser | bash
            
  publish:
    docker:
      - image: circleci/node:16
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c3:2b:e9:bb:d5:05:32:ab:df:ce:2b:c3:e5:f7:95:42"
      - checkout
      - run:
          name: publish to npm
          command: |
            #Make sure HEAD points to master
            git checkout master
            git fetch
            git rebase
            echo "//registry.npmjs.org/:_authToken=$CLOUD_MTA_BOT_NPM_TOKEN" > .npmrc
            npm install
            npm publish
      - run:
          name: remove dummy release tag
          command: |
            git push https://github.com/SAP/cloud-mta-build-tool.git --delete release
            
  image:
    docker:
      - image: cimg/go:1.16
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
      - run:
          name: build image pre-setup
          command: |
            #Make sure HEAD points to master
            git checkout master
            git fetch
            git rebase
      - run:
          name: "build base image"
          command: |
                MBT_VERSION=$(cat ./VERSION)
                sh $PWD/scripts/build_image 0   0       ${MBT_VERSION}
      - run:
          name: "build Java 8 & Node 14 image"
          command: |
                MBT_VERSION=$(cat ./VERSION)
                sh $PWD/scripts/build_image 8   14.19.2 ${MBT_VERSION}
      - run:
          name: "build Java 8 & Node 16 image"
          command: |
                MBT_VERSION=$(cat ./VERSION)
                sh $PWD/scripts/build_image 8   16.15.0 ${MBT_VERSION}
      - run:
          name: "build Java 8 & Node 18 image"
          command: |
            MBT_VERSION=$(cat ./VERSION)
            sh $PWD/scripts/build_image 8   18.1.0 ${MBT_VERSION}      

      - run:
          name: "build Java 11 & Node 14 image"
          command: |
               MBT_VERSION=$(cat ./VERSION)
               sh $PWD/scripts/build_image 11  14.19.2 ${MBT_VERSION}
      - run:
          name: "build Java 11 & Node 16 image"
          command: |
              MBT_VERSION=$(cat ./VERSION)
              sh $PWD/scripts/build_image 11  16.15.0 ${MBT_VERSION}
      - run:
          name: "build Java 11 & Node 18 image"
          command: |
            MBT_VERSION=$(cat ./VERSION)
            sh $PWD/scripts/build_image 11  18.1.0 ${MBT_VERSION}
      

      - run:
          name: publish image
          command: |
            #Make sure HEAD points to master
            git checkout master
            git fetch
            git rebase
            MBT_VERSION=$(cat ./VERSION)
            echo "Image release: ${MBT_VERSION}"
            #Push to Docker Hub
            echo "$DOCKER_HUB_TOKEN" | docker login --username $DOCKER_HUB_USER --password-stdin
            sh $PWD/scripts/publish_image 0   0   ${MBT_VERSION} "devxci"
            sh $PWD/scripts/publish_image 8   14  ${MBT_VERSION} "devxci"
            sh $PWD/scripts/publish_image 8   16  ${MBT_VERSION} "devxci"
            sh $PWD/scripts/publish_image 8   18  ${MBT_VERSION} "devxci"
            sh $PWD/scripts/publish_image 11  14  ${MBT_VERSION} "devxci"
            sh $PWD/scripts/publish_image 11  16  ${MBT_VERSION} "devxci"
            sh $PWD/scripts/publish_image 11  18  ${MBT_VERSION} "devxci"

            #Push to GitHub Container Registry
            echo "$CLOUD_MTA_BOT_GITHUB_TOKEN" | docker login "ghcr.io" --username $CLOUD_MTA_BOT_USER --password-stdin
            sh $PWD/scripts/publish_image 0   0   ${MBT_VERSION} "ghcr.io/sap"
            sh $PWD/scripts/publish_image 8   14  ${MBT_VERSION} "ghcr.io/sap"
            sh $PWD/scripts/publish_image 8   16  ${MBT_VERSION} "ghcr.io/sap"
            sh $PWD/scripts/publish_image 8   18  ${MBT_VERSION} "ghcr.io/sap"
            sh $PWD/scripts/publish_image 11  14  ${MBT_VERSION} "ghcr.io/sap"
            sh $PWD/scripts/publish_image 11  16  ${MBT_VERSION} "ghcr.io/sap"
            sh $PWD/scripts/publish_image 11  18  ${MBT_VERSION} "ghcr.io/sap"

  ghpages:
    docker:
      - image: squidfunk/mkdocs-material:4.3.1
    working_directory: ~/go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run:
          name: release to GitHub Pages
          command: |
            cd docs
            mkdocs gh-deploy --config-file ../docs/mkdocs.yml --remote-branch gh-pages

workflows:
  version: 2
  on_pr_build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - build-node:
          filters:
            branches:
              ignore: master
      - compliance:
          filters:
            branches:
              ignore: master
      - test:
          requires:
            - build
          filters:
            branches:
              ignore: master

  on_merge_build_test:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - build-node:
          filters:
            branches:
              ignore: master
      - compliance:
          filters:
            branches:
              only: master
      - test:
          requires:
            - build
          filters:
            branches:
              only: master

  on_tag_build_test_deploy:
    jobs:
      - build:
          filters:  # required since `release` has tag filters AND requires `build`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:  # required since `release` has tag filters AND requires `test`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - release:
          requires:
            - test
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - ghpages:
          requires:
            - test
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - image:
          requires:
            - release
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - publish:
          requires:
            - image
          filters:  # job runs on tag 'release' for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
