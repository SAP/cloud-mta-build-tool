# Golang CircleCI 2.0 configuration
version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.11.5
      - image: circleci/node:12.6.0

    environment:
      - DEP_VERSION: 0.5.0
    working_directory: /go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run: go version
      - run: go env
      - run:
          name: install dep
          command: |
            apk update && apk add curl git build-base bash
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
      - run: go test -v ./...
      - run: sudo chown circleci:circleci /go/bin
      - run: make tools
      - run: make lint
      - run:
          name: cov install coverge deps
          command: |
            go get golang.org/x/tools/cmd/cover
            go get github.com/mattn/goveralls
            go get github.com/modocache/gover
            go install github.com/mattn/goveralls
            go install github.com/modocache/gover
      - run: go test -v ./... -coverprofile=mta.coverprofile
      - run: gover
      - run: goveralls -v -service=circle-ci -coverprofile=gover.coverprofile -repotoken $COVERALLS_TOKEN

  test:
    docker:
      - image: shimit/mbt_multi:0.1.0
    working_directory: /go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run:
          name: install dep
          command: |
            apk update && apk add curl git build-base bash
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
      - run: cf login -a $CF_API -o $ORG -s $SPACE -u $TECH_USER -p $TECH_PASS
      - run: cd integration &&  go test -tags=integration

  deploy:
    docker:
      - image: circleci/golang:1.11.5
    working_directory: /go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - add_ssh_keys:
          fingerprints:
            - "34:86:26:17:59:ed:71:fa:b8:37:fc:d6:a4:68:af:0e"
      - checkout
      - run:
          name: install dep
          command: |
            apk update && apk add curl git build-base bash
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
      - run:
          name: remove dummy release tag
          command: |
            git push https://github.com/SAP/cloud-mta-build-tool.git --delete release
      - run:
          name: bump version
          command: |
            #Make sure HEAD points to master
            git checkout master
            CURR_MBT_VERSION=$(cat ./VERSION)
            echo "Current release: ${CURR_MBT_VERSION}"
            MBT_VERSION=$(echo $CURR_MBT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "New release: ${MBT_VERSION}"
            #Update new version in files
            sed  -i "/\"version\":/s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./package.json
            sed  -i "/cli_version:/s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./configs/version.yaml
            sed  -i "s/${CURR_MBT_VERSION}/${MBT_VERSION}/" ./VERSION
            #Generate version file
            go generate -run "go run ./internal/buildtools/embed.go ./internal/buildtools/buildtools_msg.go -source=./configs/version.yaml -target=./internal/version/version_cfg.go -name=VersionConfig -package=version"
            #Add all updated files to commit
            git add ./package.json ./configs/version.yaml ./VERSION ./internal/version/version_cfg.go
            git config user.email "${MBT_REPO_USER_EMAIL}"
            git config user.name "${MBT_REPO_USER}"
            git commit -m "[skip ci] Bump version ${MBT_VERSION}"
            #Push commit directly to master
            git push -q https://github.com/SAP/cloud-mta-build-tool.git master
            #Tag
            git tag -a v${MBT_VERSION} -m "New release ${MBT_VERSION}"
            git push https://github.com/SAP/cloud-mta-build-tool.git v${MBT_VERSION}
      - run:
          name: export github token for releaser
          command: |
            export GITHUB_TOKEN=${GITHUB_TOKEN}
      - run:
          name: release new version
          command: |
            curl -sL https://git.io/goreleaser | bash
      - run:
          name: publish to npm
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            npm publish

  ghpages:
    docker:
      - image: squidfunk/mkdocs-material:4.3.1
    working_directory: /go/src/github.com/SAP/cloud-mta-build-tool
    steps:
      - checkout
      - run:
          name: release to GitHub Pages
          command: |
            cd docs
            mkdocs gh-deploy --config-file ../docs/mkdocs.yml --remote-branch gh-pages

workflows:
  version: 2
  on_pr_build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master

  on_merge_build_test:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - test:
          requires:
            - build
          filters:
            branches:
              only: master

  on_tag_build_test_deploy:
    jobs:
      - build:
          filters:  # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - test:
          requires:
            - build
          filters:  # required since `deploy` has tag filters AND requires `test`
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - deploy:
          requires:
            - test
          filters:  # job runs on tags for no branches
            tags:
              only: /release/
            branches:
              ignore: /.*/
      - ghpages:
          requires:
            - test
          filters:  # job runs on tags for no branches - just like deploy
            tags:
              only: /release/
            branches:
              ignore: /.*/
