version=0.0.0
ifndef p
$(error platform flag is expected. e.g. use make -f makefile.mta p=cf)
endif
target_provided=true
ifndef t
t="$(CURDIR)"
target_provided=false
endif
ifndef strict
strict=true
endif
ifndef mtar
mtar="*"
endif
# Determine OS cores
NPROCS = $(shell grep -c 'processor' /proc/cpuinfo)
MAKEFLAGS += -j
# List of all the recipes to be executed during the build process
.PHONY: pre_validate pre_build validate ui meta mtar cleanup
# Default target compile all
all: pre_validate pre_build validate ui meta mtar cleanup
# Validate mta.yaml
pre_validate:
	@mbt validate -r=${strict} -e="paths"

pre_build: pre_validate
	@mbt project build -p=pre

# Set the current project repository path for general mta process
  PROJ_DIR := $(CURDIR)

# List of modules
modules = ui

# Execute all modules builds
# build module ui
ui: validate
	@cd $(PROJ_DIR)/ui && npm install && grunt
# Pack module build artifacts
	@mbt module pack -m=ui -p=${p} -t=${t}


# Create META-INF folder with MANIFEST.MF & mtad.yaml
meta: $(modules) post_build
	@mbt gen meta -p=${p} -t=${t}

post_build: $(modules)
	@mbt project build -p=post

# Validate mta.yaml 
validate: pre_build
	@mbt validate -r=${strict}

# Pack as MTAR artifact
mtar: $(modules) meta
	@mbt gen mtar -t=${t} --mtar=${mtar} --target_provided=${target_provided}

cleanup: mtar
# Remove tmp folder
	@mbt clean -t=${t}