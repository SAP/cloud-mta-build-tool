{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Cloud MTA Build Tool (MBT) Introduction The Cloud MTA Build Tool is a standalone command-line tool that builds a deployment-ready multitarget application (MTA) archive .mtar file from the artifacts of an MTA project according to the project\u2019s MTA development descriptor ( mta.yaml file), or from the module build artifacts according to the MTA deployment descriptor ( mtad.yaml file). The archive builder is used on a file system that is independent from the development environment where the application project was created. The archive builder is supported on Windows and Linux operating systems. If you previously used the Multitarget Application Archive Builder for building your MTA projects, see the topic: differences between the tools . Multitarget Application Before using this package, you should be familiar with the multitarget application concept and terminology. For background and detailed information, see the Multi-Target Application Model guide. Creating an MTA Archive According to the MTA Development Descriptor ( mta.yaml file) The build process and the resulting multitarget application archive depend on the target platform where the archive will be deployed. The currently supported target platforms are SAP Cloud Platform (both the Neo and Cloud Foundry environments) and the SAP HANA XS advanced model. Each module is built using the build technology that is either associated with the module type by default or is configured explicitly. Then the results of each module's build are packaged into an archive together with the multitarget application deployment descriptor. The deployment descriptor is created based on the structure of the multitarget application project, the multitarget application development descriptor ( mta.yaml file), the extension descriptors, if they are supplied (the builder merges them with the mta.yaml file), and the command-line options. In the deployment descriptor, the design-time modules are converted into the module types that are recognized by the respective target platforms. The resulting multitarget application archive can then be deployed on the required target platform. For more details about how the design-time module types in the mta.yaml file are converted into deployment time module types in the mtad.yaml file according to the target platform, see Module types conversion . If the MTA Build Tool encounters a module type in the mta.yaml file that is not listed in the configuration file, its definition is copied to the mtad.yaml file as is and the zip builder is applied to the module (in other words, the archived module sources are packaged as the build result). All resource definitions are passed to the mtad.yaml file as is without mapping and validations (for example, if the resource is supported in the target platform or if the specified parameters match the type). Creating an MTA Archive According to the MTA Deploymnet Descriptor ( mtad.yaml file) Under construction","title":"Home"},{"location":"#welcome-to-the-cloud-mta-build-tool-mbt","text":"","title":"Welcome to the Cloud MTA Build Tool (MBT) "},{"location":"#introduction","text":"The Cloud MTA Build Tool is a standalone command-line tool that builds a deployment-ready multitarget application (MTA) archive .mtar file from the artifacts of an MTA project according to the project\u2019s MTA development descriptor ( mta.yaml file), or from the module build artifacts according to the MTA deployment descriptor ( mtad.yaml file). The archive builder is used on a file system that is independent from the development environment where the application project was created. The archive builder is supported on Windows and Linux operating systems. If you previously used the Multitarget Application Archive Builder for building your MTA projects, see the topic: differences between the tools .","title":"Introduction"},{"location":"#multitarget-application","text":"Before using this package, you should be familiar with the multitarget application concept and terminology. For background and detailed information, see the Multi-Target Application Model guide.","title":" Multitarget Application"},{"location":"#creating-an-mta-archive-according-to-the-mta-development-descriptor-mtayaml-file","text":"The build process and the resulting multitarget application archive depend on the target platform where the archive will be deployed. The currently supported target platforms are SAP Cloud Platform (both the Neo and Cloud Foundry environments) and the SAP HANA XS advanced model. Each module is built using the build technology that is either associated with the module type by default or is configured explicitly. Then the results of each module's build are packaged into an archive together with the multitarget application deployment descriptor. The deployment descriptor is created based on the structure of the multitarget application project, the multitarget application development descriptor ( mta.yaml file), the extension descriptors, if they are supplied (the builder merges them with the mta.yaml file), and the command-line options. In the deployment descriptor, the design-time modules are converted into the module types that are recognized by the respective target platforms. The resulting multitarget application archive can then be deployed on the required target platform. For more details about how the design-time module types in the mta.yaml file are converted into deployment time module types in the mtad.yaml file according to the target platform, see Module types conversion . If the MTA Build Tool encounters a module type in the mta.yaml file that is not listed in the configuration file, its definition is copied to the mtad.yaml file as is and the zip builder is applied to the module (in other words, the archived module sources are packaged as the build result). All resource definitions are passed to the mtad.yaml file as is without mapping and validations (for example, if the resource is supported in the target platform or if the specified parameters match the type).","title":"Creating an MTA Archive According to the MTA Development Descriptor (mta.yaml file)"},{"location":"#creating-an-mta-archive-according-to-the-mta-deploymnet-descriptor-mtadyaml-file","text":"Under construction","title":"Creating an MTA Archive According to the MTA Deploymnet Descriptor (mtad.yaml file)"},{"location":"configuration/","text":"Overview Optionally, you can define the builder behavior by configuring the parameters in the build-parameters section in the mta.yaml file for each module or globally. For each module, the Cloud MTA Build Tool performs a build operation using a default technology specific for the module type, for example, the npm builder. For the complete list of available builders and their default behaviors, see Builders Execution Commands . To find out which builder is applied to a module if the builder parameters are not explicitly set in the MTA development descriptor file ( mta.yaml ), see Modules' default builder configuration . The following sections describe in detail how to configure each of the supported builders. Configuring a builder for a module To use a non-default builder for a module, specify its name in the builder parameter. - name: module1 type: java build-parameters: builder: zip Configuring build order You can define the dependencies between modules to ensure that they are built in a certain order. In addition, you can use the build results of one module to build another module. Also you can can configure build steps that are performed before building any of the modules. Defining module build order To define the build order of modules, in the mta.yaml file, add a requires section under the build-parameters section of the dependent module; that is, a module that should be built only after building another required module. Then specify the required module name as a property of the dependent module\u2019s requires section. The example mta.yaml file below demonstrates how to build module A after module B: ID: myproject _schema-version: '3.1' version: 0.0.1 modules: - name: A type: html5 path: pathtomoduleA build-parameters: requires: - name: B - name: B type: html5 path: pathtomoduleB NOTE: The order of modules in the mta.yaml file is not important as long as the requires sections have been coded with the relevant dependencies. CAUTION: Cyclical dependencies are not allowed. If such dependencies are found, the build fails. Using build results for building another module If you want to use the build results of module B for building module A, modify the requires section as follows: ID: myproject _schema-version: '3.1' version: 0.0.1 modules: - name: A type: html5 path: pathtomoduleA build-parameters: requires: - name: B artifacts: [ * ] target-path: newfolder - name: B type: html5 path: pathtomoduleB Configuring a global build If you want to run addtional build steps before running builders of the specific modules, define it by using the build-parameters section at global level in the mta.yaml file as follows: ID: myproject _schema-version: '3.1' version: 0.0.1 build-parameters: before-all: - builder: npm modules: ... You can configure any of the supported builders. Also, you can list several builders and they will run in the specified order. ID: myproject _schema-version: '3.1' version: 0.0.1 build-parameters: before-all: builders: - builder: custom commands: - npm run script1 - builder: grunt modules: ... NOTE: Only the following build parameters are considered when configuring a builder at the global level: timeout commands (for the custom builder only) fetcher-opts (for the fetcher builder only) Configuring the fetcher builder The fetcher builder can be used for packaging already available Maven artifacts into a multitarget application archive as the module\u2019s build results. - name: my_module build-parameters: builder: fetcher fetcher-opts: repo-type: maven repo-coordinates: mygroup:myart:1.0.0 The repo-coordinates parameter is a string of the form groupId:artifactId:version[:packaging[:classifier]] . This is equivalent to a Maven dependency command, delegating the specified coordinates to the standard Maven dependency mechanism: mvn dependency:copy -Dartifact=mygroup:myart:1.0.0 Configuring the custom builder You can define your own build commands by configuring a custom builder as follows: - name: my_module build-parameters: builder: custom commands: - npm install - grunt - npm prune --production When used for configuring a module builder, you can leave the commands parameter list empty: - name: my_module build-parameters: builder: custom commands: [] In this case, no build is performed and the module's root folder or a folder specified in the build-result is packaged into the MTA archive. Configuring module build artifacts to package into MTA archive You can configure the following build parameters to define artifacts to package into the MTA archive for the specific module: Name Default value Description build-result For the maven builder: module's folder /target/\\*.war For the fetcher builder: module's folder /target/\\*.\\* For other builders: module's folder A path to the build results that should be packaged. ignore None Files and/or subfolders to exclude from the package. For example: - name: module1 type: java build-parameters: builder: zip build-result: myfolder ignore: [ *.txt , mtaignore/ ] NOTE: These parameters are not considered for the fetcher builder. Configuring and packaging modules according to target platforms If you want to control which modules should be packaged into a multitarget application archive for a specific platform, use the supported-platforms build parameter as follows: ID: myproject _schema-version: '2.0' version: 0.0.1 modules: - name: A type: html5 path: pathtomoduleA build-parameters: supported-platforms: [NEO, CF] - name: B type: html5 path: pathtomoduleB build-parameters: supported-platforms: [NEO] - name: C type: html5 path: pathtomoduleC build-parameters: supported-platforms: [] If you build an application with the multitarget application descriptor above for a CF (Cloud Foundry) target, all its modules are built, but the resulting multitarget application archive and deployment descriptor include module A only. If you build the same application for a NEO target, the multitarget application archive includes module A and module B. If you have a module C with an empty supported platform list, it is never included in any multitarget application archive, regardless of the target platform of the specific multitarget application build. If the supported-platforms build parameter is not used, the module is packaged for any target platform. You can use these values or any combination of these values for the supported-platforms build parameter: CF for the SAP Cloud Platform Cloud Foundry environment NEO for the SAP Cloud Platform Neo environment XSA for the SAP HANA XS advanced model Configuring timeout sessions When you build a specific module, there is a default 5-minute timeout allowance. After this time, the build will fail. You can configure the time allowed for timeout when performing a build by adding the timeout property to the module build parameters. The timeout property uses the number of hours h number of minutes m number of seconds s format. For example: - name: module1 type: java build-parameters: timeout: 6m30s Also, you can use this parameter to define timeout for the global before-all build . Configuring the build artifact name The module build results are by default packaged into the resulting archive under the name \u201cdata\u201d. You can change this name as needed using the build-artifact-name build parameter: modules: - name: db type: hdb path: db build-parameters: build-artifact-name: myfileName NOTE: The file extension is not configurable; it is predefined by the module type (.zip or .war).","title":"Configuration"},{"location":"configuration/#overview","text":"Optionally, you can define the builder behavior by configuring the parameters in the build-parameters section in the mta.yaml file for each module or globally. For each module, the Cloud MTA Build Tool performs a build operation using a default technology specific for the module type, for example, the npm builder. For the complete list of available builders and their default behaviors, see Builders Execution Commands . To find out which builder is applied to a module if the builder parameters are not explicitly set in the MTA development descriptor file ( mta.yaml ), see Modules' default builder configuration . The following sections describe in detail how to configure each of the supported builders.","title":"Overview"},{"location":"configuration/#configuring-a-builder-for-a-module","text":"To use a non-default builder for a module, specify its name in the builder parameter. - name: module1 type: java build-parameters: builder: zip","title":"Configuring a builder for a module"},{"location":"configuration/#configuring-build-order","text":"You can define the dependencies between modules to ensure that they are built in a certain order. In addition, you can use the build results of one module to build another module. Also you can can configure build steps that are performed before building any of the modules.","title":"Configuring build order"},{"location":"configuration/#defining-module-build-order","text":"To define the build order of modules, in the mta.yaml file, add a requires section under the build-parameters section of the dependent module; that is, a module that should be built only after building another required module. Then specify the required module name as a property of the dependent module\u2019s requires section. The example mta.yaml file below demonstrates how to build module A after module B: ID: myproject _schema-version: '3.1' version: 0.0.1 modules: - name: A type: html5 path: pathtomoduleA build-parameters: requires: - name: B - name: B type: html5 path: pathtomoduleB NOTE: The order of modules in the mta.yaml file is not important as long as the requires sections have been coded with the relevant dependencies. CAUTION: Cyclical dependencies are not allowed. If such dependencies are found, the build fails.","title":"Defining module build order"},{"location":"configuration/#using-build-results-for-building-another-module","text":"If you want to use the build results of module B for building module A, modify the requires section as follows: ID: myproject _schema-version: '3.1' version: 0.0.1 modules: - name: A type: html5 path: pathtomoduleA build-parameters: requires: - name: B artifacts: [ * ] target-path: newfolder - name: B type: html5 path: pathtomoduleB","title":"Using build results for building another module"},{"location":"configuration/#configuring-a-global-build","text":"If you want to run addtional build steps before running builders of the specific modules, define it by using the build-parameters section at global level in the mta.yaml file as follows: ID: myproject _schema-version: '3.1' version: 0.0.1 build-parameters: before-all: - builder: npm modules: ... You can configure any of the supported builders. Also, you can list several builders and they will run in the specified order. ID: myproject _schema-version: '3.1' version: 0.0.1 build-parameters: before-all: builders: - builder: custom commands: - npm run script1 - builder: grunt modules: ... NOTE: Only the following build parameters are considered when configuring a builder at the global level: timeout commands (for the custom builder only) fetcher-opts (for the fetcher builder only)","title":"Configuring a global build"},{"location":"configuration/#configuring-the-fetcher-builder","text":"The fetcher builder can be used for packaging already available Maven artifacts into a multitarget application archive as the module\u2019s build results. - name: my_module build-parameters: builder: fetcher fetcher-opts: repo-type: maven repo-coordinates: mygroup:myart:1.0.0 The repo-coordinates parameter is a string of the form groupId:artifactId:version[:packaging[:classifier]] . This is equivalent to a Maven dependency command, delegating the specified coordinates to the standard Maven dependency mechanism: mvn dependency:copy -Dartifact=mygroup:myart:1.0.0","title":"Configuring the fetcher builder"},{"location":"configuration/#configuring-the-custom-builder","text":"You can define your own build commands by configuring a custom builder as follows: - name: my_module build-parameters: builder: custom commands: - npm install - grunt - npm prune --production When used for configuring a module builder, you can leave the commands parameter list empty: - name: my_module build-parameters: builder: custom commands: [] In this case, no build is performed and the module's root folder or a folder specified in the build-result is packaged into the MTA archive.","title":"Configuring the custom builder"},{"location":"configuration/#configuring-module-build-artifacts-to-package-into-mta-archive","text":"You can configure the following build parameters to define artifacts to package into the MTA archive for the specific module: Name Default value Description build-result For the maven builder: module's folder /target/\\*.war For the fetcher builder: module's folder /target/\\*.\\* For other builders: module's folder A path to the build results that should be packaged. ignore None Files and/or subfolders to exclude from the package. For example: - name: module1 type: java build-parameters: builder: zip build-result: myfolder ignore: [ *.txt , mtaignore/ ] NOTE: These parameters are not considered for the fetcher builder.","title":"Configuring module build artifacts to package into MTA archive"},{"location":"configuration/#configuring-and-packaging-modules-according-to-target-platforms","text":"If you want to control which modules should be packaged into a multitarget application archive for a specific platform, use the supported-platforms build parameter as follows: ID: myproject _schema-version: '2.0' version: 0.0.1 modules: - name: A type: html5 path: pathtomoduleA build-parameters: supported-platforms: [NEO, CF] - name: B type: html5 path: pathtomoduleB build-parameters: supported-platforms: [NEO] - name: C type: html5 path: pathtomoduleC build-parameters: supported-platforms: [] If you build an application with the multitarget application descriptor above for a CF (Cloud Foundry) target, all its modules are built, but the resulting multitarget application archive and deployment descriptor include module A only. If you build the same application for a NEO target, the multitarget application archive includes module A and module B. If you have a module C with an empty supported platform list, it is never included in any multitarget application archive, regardless of the target platform of the specific multitarget application build. If the supported-platforms build parameter is not used, the module is packaged for any target platform. You can use these values or any combination of these values for the supported-platforms build parameter: CF for the SAP Cloud Platform Cloud Foundry environment NEO for the SAP Cloud Platform Neo environment XSA for the SAP HANA XS advanced model","title":"Configuring and packaging modules according to target platforms"},{"location":"configuration/#configuring-timeout-sessions","text":"When you build a specific module, there is a default 5-minute timeout allowance. After this time, the build will fail. You can configure the time allowed for timeout when performing a build by adding the timeout property to the module build parameters. The timeout property uses the number of hours h number of minutes m number of seconds s format. For example: - name: module1 type: java build-parameters: timeout: 6m30s Also, you can use this parameter to define timeout for the global before-all build .","title":"Configuring timeout sessions"},{"location":"configuration/#configuring-the-build-artifact-name","text":"The module build results are by default packaged into the resulting archive under the name \u201cdata\u201d. You can change this name as needed using the build-artifact-name build parameter: modules: - name: db type: hdb path: db build-parameters: build-artifact-name: myfileName NOTE: The file extension is not configurable; it is predefined by the module type (.zip or .war).","title":"Configuring the build artifact name"},{"location":"download/","text":"You can install the Cloud MTA Build Tool (MBT) using either of these methods below: Install manually Download the latest binary file according to your operating system. // Example for Darwin/Linux: wget https://github.com/SAP/cloud-mta-build-tool/releases/download/ LATEST /cloud-mta-build-tool_ LATEST _Linux_amd64.tar.gz Extract the archive file to the folder where you want to install the tool. //Example for Darwin/Linux: tar xvzf cloud-mta-build-tool_LATEST_Linux_amd64.tar.gz Add the binary file to your ~/bin path according to your operating system: In Darwin / Linux, copy the binary file to the ~/usr/local/bin/ folder, for example: cp mbt /usr/local/bin/ In Windows, copy the mbt.exe binary file to the C:/Windows/ folder. Install using npm Run the command below. npm install -g mbt","title":"Download"},{"location":"makefile/","text":"Windows In order to build an MTA archive from a project's source code in a Windows environment, install GNU Make 4.2.1 on your machine. You can download the executable from a source that you trust according to your processor (32-bit or 64-bit) to a local folder (change the file name to make.exe ) and then add the folder to the PATH environment variable. For example, you can download the tool from here . Alternatively, you can use Chocolatey to install or upgrade GNU Make . Mac If the build fails because make cannot run, you might have to install the Command-Line Tools. See the troubleshooting topic for more details.","title":"Make"},{"location":"makefile/#windows","text":"In order to build an MTA archive from a project's source code in a Windows environment, install GNU Make 4.2.1 on your machine. You can download the executable from a source that you trust according to your processor (32-bit or 64-bit) to a local folder (change the file name to make.exe ) and then add the folder to the PATH environment variable. For example, you can download the tool from here . Alternatively, you can use Chocolatey to install or upgrade GNU Make .","title":"Windows"},{"location":"makefile/#mac","text":"If the build fails because make cannot run, you might have to install the Command-Line Tools. See the troubleshooting topic for more details.","title":"Mac"},{"location":"migration/","text":"Overview If you have previously used the Multitarget Application Archive Builder for building your MTA projects, you should be aware of the differences between the tools. Features that are handled differently in the Cloud MTA Build Tool The Cloud MTA build Tool uses GNU Make technology for building an MTA project. Therefore, you should have GNU Make installed in your build environmnet. For more information, see sections GNU Make installation and commands for building a project . Packaging of HTML5 modules in deploy_mode=html5-repo You need to update your mta.yaml file to exclude html5 modules from the resulting MTA archive and configure the build result folder. In order to do that, add the following to the build-parameters section for each module of this type: build-parameters: supported-platforms: [] build-result: dist For more information about the supported-platforms build parameter, see Configuring and Packaging Modules According to Target Platforms . The following build-parameters are not supported by the Cloud MTA Build Tool: npm-opts grunt-opt maven-opts If you need to change the default build behavior defined for the corresponding builder, see configure custom builder . For a complete list of available builders and their default behaviors, see Builders execution commands . If you replace the maven builder with the custom builder, you also need to set the build-result parameter (if it was not configured explicitly) as follows: - name: module1 type: java build-parameters: builder: custom ... build-result: target/*.war ... The Cloud MTA Build tool strictly validates the rule that names of modules, resources, and provided property sets, are unique within the mta.yaml file. This ensures that when the name is referenced in the requires section, it is unambiguously resolved. The Multitarget Application Archive Builder allowed the use of the same name for a module and for one of its property sets. For example: - name: SOME_NAME type: java path: srv provides: - name: SOME_NAME properties: url: ${default-url} When migrating to the new build tool, you need to rename either the module or the provided property set. For example: - name: SOME_NAME type: java path: srv provides: - name: SOME_NAME_API # New name properties: url: ${default-url} After renaming, make sure that the places where the name is used refer to the correct artifact. The hdb builder is not supported by the Cloud MTA Build tool. You no longer require builder settings for the hdb module because the required npm install --production command is run by default for this module type. If you used this builder for other module types, you can repace it with the npm builder or use the custom builder that runs the \"npm install --production\" command. NOTE: If you try to build the project without the changes above, the build tool will identify this and will fail the build with the corresponding errors. Service creation or service binding parameters provided in external files and referenced by the path property of the correponding entity in the mta.yaml are packaged differently by the tools into the result MTA archive. Therefore, if you have a JSON file with service creation parameters or service binding parameters and your JSON file contains parameters or placeholders that should be resolved when you deploy the MTA archive, the correponding properties should be moved to the mta.yaml file. Otherwise, values assigned to these properties during deployment will be incorrect, because the parameters or placeholders are resolved only if they are specified within an MTA descriptor, i.e. the mta.yaml or mtad.yaml files. For example, if you provide parameters for creating a UAA service in an xs-security.json file: resources: - name: my-uaa type: com.sap.xs.uaa parameters: path: ./xs-security.json and your xs-security.json file contains a property whose value should be resolved during the MTA archive deployment: { xsappname : ${default-xsappname} } then, you need to modify your mta.yaml file as follows: resources: - name: my-uaa type: com.sap.xs.uaa parameters: path: ./xs-security.json config: xsappname: ${default-xsappname} In the xs-security.json file, you can assign the property a temporary value that does not use the parameter. During deployment, the value specified directly in the MTA descriptor overrides the value specified in the JSON file. { xsappname : tmp_appname } Alternatively, you can remove the property from your xs-security.json file. NOTE: If you try to deploy the project without the changes above, the deploy service will identify this and will fail the deployment with the corresponding errors.","title":"Migration"},{"location":"migration/#overview","text":"If you have previously used the Multitarget Application Archive Builder for building your MTA projects, you should be aware of the differences between the tools.","title":"Overview"},{"location":"migration/#features-that-are-handled-differently-in-the-cloud-mta-build-tool","text":"The Cloud MTA build Tool uses GNU Make technology for building an MTA project. Therefore, you should have GNU Make installed in your build environmnet. For more information, see sections GNU Make installation and commands for building a project . Packaging of HTML5 modules in deploy_mode=html5-repo You need to update your mta.yaml file to exclude html5 modules from the resulting MTA archive and configure the build result folder. In order to do that, add the following to the build-parameters section for each module of this type: build-parameters: supported-platforms: [] build-result: dist For more information about the supported-platforms build parameter, see Configuring and Packaging Modules According to Target Platforms . The following build-parameters are not supported by the Cloud MTA Build Tool: npm-opts grunt-opt maven-opts If you need to change the default build behavior defined for the corresponding builder, see configure custom builder . For a complete list of available builders and their default behaviors, see Builders execution commands . If you replace the maven builder with the custom builder, you also need to set the build-result parameter (if it was not configured explicitly) as follows: - name: module1 type: java build-parameters: builder: custom ... build-result: target/*.war ... The Cloud MTA Build tool strictly validates the rule that names of modules, resources, and provided property sets, are unique within the mta.yaml file. This ensures that when the name is referenced in the requires section, it is unambiguously resolved. The Multitarget Application Archive Builder allowed the use of the same name for a module and for one of its property sets. For example: - name: SOME_NAME type: java path: srv provides: - name: SOME_NAME properties: url: ${default-url} When migrating to the new build tool, you need to rename either the module or the provided property set. For example: - name: SOME_NAME type: java path: srv provides: - name: SOME_NAME_API # New name properties: url: ${default-url} After renaming, make sure that the places where the name is used refer to the correct artifact. The hdb builder is not supported by the Cloud MTA Build tool. You no longer require builder settings for the hdb module because the required npm install --production command is run by default for this module type. If you used this builder for other module types, you can repace it with the npm builder or use the custom builder that runs the \"npm install --production\" command. NOTE: If you try to build the project without the changes above, the build tool will identify this and will fail the build with the corresponding errors. Service creation or service binding parameters provided in external files and referenced by the path property of the correponding entity in the mta.yaml are packaged differently by the tools into the result MTA archive. Therefore, if you have a JSON file with service creation parameters or service binding parameters and your JSON file contains parameters or placeholders that should be resolved when you deploy the MTA archive, the correponding properties should be moved to the mta.yaml file. Otherwise, values assigned to these properties during deployment will be incorrect, because the parameters or placeholders are resolved only if they are specified within an MTA descriptor, i.e. the mta.yaml or mtad.yaml files. For example, if you provide parameters for creating a UAA service in an xs-security.json file: resources: - name: my-uaa type: com.sap.xs.uaa parameters: path: ./xs-security.json and your xs-security.json file contains a property whose value should be resolved during the MTA archive deployment: { xsappname : ${default-xsappname} } then, you need to modify your mta.yaml file as follows: resources: - name: my-uaa type: com.sap.xs.uaa parameters: path: ./xs-security.json config: xsappname: ${default-xsappname} In the xs-security.json file, you can assign the property a temporary value that does not use the parameter. During deployment, the value specified directly in the MTA descriptor overrides the value specified in the JSON file. { xsappname : tmp_appname } Alternatively, you can remove the property from your xs-security.json file. NOTE: If you try to deploy the project without the changes above, the deploy service will identify this and will fail the deployment with the corresponding errors.","title":"Features that are handled differently in the Cloud MTA Build Tool"},{"location":"newbuilder/","text":"Under construction","title":"New Builder"},{"location":"newmodule/","text":"Under construction","title":"New Module"},{"location":"performance/","text":"Under construction","title":"Performance"},{"location":"process/","text":"Open Development All work on MBT happens directly on GitHub. Both core team members and external contributors send pull requests which go through the same review process. Branch Organization We will do our best to keep the master branch in a good shape, with tests passing at all times. But in order to move fast, we will make API changes that your application might not be compatible with. We recommend that you use the latest stable version of MBT. If you send a pull request, please do it against the master branch. We maintain stable branches for major versions separately but we don\u2019t accept pull requests to them directly. Instead, we cherry-pick non-breaking changes from master to the latest stable major version. Semantic Versioning MBT follows semantic versioning. We release patch versions for bug-fixes, minor versions for new features, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance. Every significant change will be documented in the changelog file. Sending a Pull Request The team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation. Before submitting a pull request, please make sure the following is done: Fork the repository and create your branch from master. Run go mod vendor in the repository root. If you\u2019ve fixed a bug or added code that should be tested, add tests! See commit prefix section Ensure the test suite passes via go test -v ./... Tip: you can use command make tests . You can test the binary by using command make which will build the binary for each target OS. If you change some config file you should run go generate command, this will create equivalent byte content file. Format your code with go fmt and run linter or better use make tools make lint on your changes. If you haven\u2019t already, complete the CLA. Contribution Prerequisites You have go installed at v1.13+ You are familiar with GIT Commit Prefix [feat] (new feature for the user, not a new feature for build script) [fix] (bug fix for the user, not a fix to a build script) [docs] (changes to the documentation) [style] (formatting, missing semi colons, etc; no production code change) [refactor] (refactoring production code, eg. renaming a variable) [test] (adding missing tests, refactoring tests; no production code change) [chore] (updating grunt tasks etc; no production code change)","title":"Process"},{"location":"process/#open-development","text":"All work on MBT happens directly on GitHub. Both core team members and external contributors send pull requests which go through the same review process.","title":"Open Development"},{"location":"process/#branch-organization","text":"We will do our best to keep the master branch in a good shape, with tests passing at all times. But in order to move fast, we will make API changes that your application might not be compatible with. We recommend that you use the latest stable version of MBT. If you send a pull request, please do it against the master branch. We maintain stable branches for major versions separately but we don\u2019t accept pull requests to them directly. Instead, we cherry-pick non-breaking changes from master to the latest stable major version.","title":"Branch Organization"},{"location":"process/#semantic-versioning","text":"MBT follows semantic versioning. We release patch versions for bug-fixes, minor versions for new features, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance. Every significant change will be documented in the changelog file.","title":"Semantic Versioning"},{"location":"process/#sending-a-pull-request","text":"The team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation.","title":"Sending a Pull Request"},{"location":"process/#before-submitting-a-pull-request-please-make-sure-the-following-is-done","text":"Fork the repository and create your branch from master. Run go mod vendor in the repository root. If you\u2019ve fixed a bug or added code that should be tested, add tests! See commit prefix section Ensure the test suite passes via go test -v ./... Tip: you can use command make tests . You can test the binary by using command make which will build the binary for each target OS. If you change some config file you should run go generate command, this will create equivalent byte content file. Format your code with go fmt and run linter or better use make tools make lint on your changes. If you haven\u2019t already, complete the CLA.","title":"Before submitting a pull request, please make sure the following is done:"},{"location":"process/#contribution-prerequisites","text":"You have go installed at v1.13+ You are familiar with GIT","title":"Contribution Prerequisites"},{"location":"process/#commit-prefix","text":"[feat] (new feature for the user, not a new feature for build script) [fix] (bug fix for the user, not a fix to a build script) [docs] (changes to the documentation) [style] (formatting, missing semi colons, etc; no production code change) [refactor] (refactoring production code, eg. renaming a variable) [test] (adding missing tests, refactoring tests; no production code change) [chore] (updating grunt tasks etc; no production code change)","title":"Commit Prefix"},{"location":"roadmap/","text":"Milestone 1 - (Q1-Q2 - 2019) [x] Supports project-assembly-based deployment descriptors. [x] Supports the building of HTML5 applications (non repo). [x] Supports the building of node applications. [x] Supports build dependencies. [x] Supports the copying of build results from other modules. [x] Supports the build results from a different location. [x] Supports target platforms. [x] Supports the generation of a default Makefile file. [x] Supports the building of XSA and CF (Cloud Foundry) targets. Milestone 2 - (Q2 - 2019) [x] Supports the generation of verbose Makefile files. [x] Supports MTA extensions. [x] Supports the building of Java and Maven applications. [x] Supports ZIP builds. [x] Supports fetcher builds. [x] Supports build parameters: [x] Supports build options. [x] Supports ignore files and folders. [x] Supports the definition of timeouts. [x] Supports the naming of build artifacts. [x] Supports semantic validations. [x] Partially supports the advanced mta.yaml (3.1 3.2) schema. Milestone 3 - (Q3 - Q4 - 2019) [ ] Supports multi-schema. [x] Supports the enhancing of schema validations. [x] Supports the generation of an mtad.yaml file from an mta.yaml file. [ ] Supports parallel execution for the default Makefile file. [ ] Supports incremental builds; in other words, one module at a time. Milestone 4 - (Q4 - 2019) [ ] Supports the extensibility framework. [ ] Fully supports the advanced mta.yaml (3.1 3.2) schema.","title":"Roadmap"},{"location":"roadmap/#milestone-1-q1-q2-2019","text":"[x] Supports project-assembly-based deployment descriptors. [x] Supports the building of HTML5 applications (non repo). [x] Supports the building of node applications. [x] Supports build dependencies. [x] Supports the copying of build results from other modules. [x] Supports the build results from a different location. [x] Supports target platforms. [x] Supports the generation of a default Makefile file. [x] Supports the building of XSA and CF (Cloud Foundry) targets.","title":"Milestone 1  - (Q1-Q2 - 2019)"},{"location":"roadmap/#milestone-2-q2-2019","text":"[x] Supports the generation of verbose Makefile files. [x] Supports MTA extensions. [x] Supports the building of Java and Maven applications. [x] Supports ZIP builds. [x] Supports fetcher builds. [x] Supports build parameters: [x] Supports build options. [x] Supports ignore files and folders. [x] Supports the definition of timeouts. [x] Supports the naming of build artifacts. [x] Supports semantic validations. [x] Partially supports the advanced mta.yaml (3.1 3.2) schema.","title":"Milestone 2 - (Q2 - 2019)"},{"location":"roadmap/#milestone-3-q3-q4-2019","text":"[ ] Supports multi-schema. [x] Supports the enhancing of schema validations. [x] Supports the generation of an mtad.yaml file from an mta.yaml file. [ ] Supports parallel execution for the default Makefile file. [ ] Supports incremental builds; in other words, one module at a time.","title":"Milestone 3 - (Q3 - Q4  - 2019)"},{"location":"roadmap/#milestone-4-q4-2019","text":"[ ] Supports the extensibility framework. [ ] Fully supports the advanced mta.yaml (3.1 3.2) schema.","title":"Milestone 4 - (Q4 - 2019)"},{"location":"support/","text":"Please follow our issue template on how to report an issue.","title":"Support"},{"location":"tools/","text":"Additional tools are required in your build environment for running specific builders. For more information about builders, see the Configuration section. Builder Prerequisite Tools npm Node.js 6 or later npm Grunt Node.js 6 or later npm Grunt hdb Node.js 6 or later npm sitecontent Node.js 6 or later npm maven Java SE Development Kit 8 Apache Maven fetcher Java SE Development Kit 8 Apache Maven golang 1.10.x evo Node.js 6 or later npm Make sure to update these environment variables accordingly: For Java SE Development Kit : JAVA_HOME and PATH For Apache Maven : M2_HOME and PATH For Node.js and npm : PATH","title":"Tools"},{"location":"troubleshooting/","text":"Troubleshooting Installation Indicator: Installation fails with the following error: Error: EACCES: permission denied Solution: Grant the user \"admin\" permissions to run the command for the installation process using the following command: sudo npm install -g mbt --unsafe-perm=true --allow-root Building a Multitarget Application Timeouts Missing npm registry configuration Indicator: Sometimes, when executing the mbt build [args] command, the build process hangs and ends with a timeout error. This may be due to a network error or because of missing registry configurations. When using packages provided by SAP, you should verify that your npm config file refers to the SAP registry. Solution: Add an .npmrc file to the module (that hangs) as a sibling to the 'package.json' file as follows: $ cat .npmrc @sap:registry=https://npm.sap.com/ For more details, see the npm documentation . Make cannot run on Mac OS Indicator: The mbt build command fails on Mac and the build output contains the following error: xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun Solution: Install the Command-Line Tools: xcode-select --install The tools can also be downloaded from https://developer.apple.com/download/more/ .","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#installation","text":"Indicator: Installation fails with the following error: Error: EACCES: permission denied Solution: Grant the user \"admin\" permissions to run the command for the installation process using the following command: sudo npm install -g mbt --unsafe-perm=true --allow-root","title":"Installation"},{"location":"troubleshooting/#building-a-multitarget-application","text":"","title":"Building a Multitarget Application"},{"location":"troubleshooting/#timeouts","text":"","title":"Timeouts"},{"location":"troubleshooting/#missing-npm-registry-configuration","text":"Indicator: Sometimes, when executing the mbt build [args] command, the build process hangs and ends with a timeout error. This may be due to a network error or because of missing registry configurations. When using packages provided by SAP, you should verify that your npm config file refers to the SAP registry. Solution: Add an .npmrc file to the module (that hangs) as a sibling to the 'package.json' file as follows: $ cat .npmrc @sap:registry=https://npm.sap.com/ For more details, see the npm documentation .","title":"Missing npm registry configuration"},{"location":"troubleshooting/#make-cannot-run-on-mac-os","text":"Indicator: The mbt build command fails on Mac and the build output contains the following error: xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun Solution: Install the Command-Line Tools: xcode-select --install The tools can also be downloaded from https://developer.apple.com/download/more/ .","title":"Make cannot run on Mac OS"},{"location":"usage/","text":"How to get help on the tools commands Command Usage Description help mbt -h Prints all the available commands. help mbt [command] --help or mbt [command] -h Prints detailed information about the specified command. How to find out the version of the installed tool Command Usage Description version mbt -v Prints the current Cloud MTA Build Tool version. How to build an MTA archive from the project sources Overview You can use one of the following two approaches for building your MTA project: - One-step build using the mbt build command - Two-step build using a combination of the mbt init and make commands. Both methods leverage the GNU Make technology for the actual build. If you are using the one-step approach, the tool generates a temporary build configuration file and automatically invokes the make command. The generated Makefile is then deleted at the end of the build. The second approach allows you to generate the Makefile using the mbt init command. You can adjust the generated file according to your project needs and then build the MTA archive using the make command. In this case, we recommend that you include the generated Makefile in the project's source control management system to ensure that the same build process is applied across all the project's contributors, regardless of the build environment. Prerequisites GNU Make 4.2.1 is installed in your build environment. Module build tools are installed in your build environment. For more information, see the corresponding Download and Installation sections . One-step build Quick start example: // Executes the MTA project build for the Cloud Foundry target environment. mbt build mbt build Generates a temporary Makefile according to the MTA descriptor and runs the make command to package the MTA project into the MTA archive. Usage: mbt build flags Flags: Flag Mandatory / Optional Description Examples -p (--platform) Optional The name of the target deployment platform. The supported deployment platforms are: cf for SAP Cloud Platform Cloud Foundry environment neo for the SAP Cloud Platform Neo environment xsa for the SAP HANA XS advanced model If this parameter is not provided, the project is built for the SAP Cloud Platform Cloud Foundry environment mbt build -p=cf -s (--source) Optional The path to the MTA project; the current path is set as the default. mbt build -p=cf -s=C:/TestProject -t (--target) Optional The folder for the generated MTAR file. If this parameter is not provided, the MTAR file is saved in the mta_archives subfolder of the current folder. If the parameter is provided, the MTAR file is saved in the root of the folder provided by the argument. mbt build -p=cf -t=C:/TestProject --mtar Optional The file name of the generated archive file. If this parameter is omitted, the file name is created according to the following naming convention: mta_application_ID _ mta_application_version .mtar If the parameter is provided, but does not include an extension, the .mtar extension is added. mbt build -p=cf --mtar=TestProject.mtar -e (--extensions) Optional The path or paths to multitarget application extension files (.mtaext). Several extension files separated by commas can be passed with a single flag, or each extension file can be specified with its own flag. mbt build -e=test1.mtaext,test2.mtaext or mbt build -e=test1.mtaext -e=test2.mtaext --strict Optional The default value is true . If set to true , the duplicated fields and fields that are not defined in the mta.yaml schema are reported as errors. If set to false , they are reported as warnings. mbt build -p=cf --strict=true BETA -m (--mode) Optional The possible value is verbose . If run with this option, the temporary Makefile is generated in a way that allows the parallel execution of Make jobs to make the build process faster. mbt build -m=verbose BETA -j (--jobs) Optional Used only with the --mode parameter. This option configures the number of Make jobs that can run simultaneously. If omitted or if the value is less than or equal to zero, the number of jobs is defined by the number of available CPUs (maximum 8). mbt build -m=verbose -j=8 Two-step build Quick start example: // Generates the `Makefile.mta` file. mbt init // Executes the MTA project build for Cloud Foundry target environment. make -f Makefile.mta p=cf mbt init Generates the Makefile.mta file according to the MTA descriptor (mta.yaml file). The make command uses the generated Makefile.mta file to package the MTA project. Usage: mbt init flags Flags: Flag Mandatory / Optional Description Examples -s (--source) Optional The path to the MTA project; the current path is set as the default. mbt init -s=C:/TestProject -t (--target) Optional The path to the generated Makefile folder; the current path is set as the default. mbt init -t=C:/TestFolder -e (--extensions) Optional The path or paths to multitarget application extension files (.mtaext). Several extension files separated by commas can be passed with a single flag, or each extension file can be specified with its own flag. mbt build -e=test1.mtaext,test2.mtaext or mbt build -e=test1.mtaext -e=test2.mtaext make Packages the MTA project into the MTA archive according to the Makefile . Usage: make parameters Parameters: Parameter Type Mandatory / Optional Description Examples -f path to Makefile.mta string Mandatory The path to the Makefile.mta file that contains the build configurations. make -f Makefile.mta p=cf p string Mandatory The name of the target deployment platform. The supported deployment platforms are: cf for the SAP Cloud Platform Cloud Foundry environment neo for the SAP Cloud Platform Neo environment xsa for the SAP HANA XS advanced model make -f Makefile.mta p=cf t string Optional The folder for the generated MTAR file. If this parameter is not provided, the MTAR file is saved in the mta_archives subfolder of the current folder. If the parameter is provided, the MTAR file is saved in the root of the folder provided by the argument. make -f Makefile.mta p=cf t=C:\\temp mtar string Optional The file name of the generated archive file. If this parameter is omitted, the file name is created according to the following naming convention: mta_application_ID _ mta_application_version .mtar If the parameter is provided, but does not include an extension, the .mtar extension is added. make -f Makefile.mta p=cf mtar=myMta make -f Makefile.mta p=cf mtar=myMta.mtar strict Boolean Optional The default value is true . If set to true , the duplicated fields and fields that are not defined in the mta.yaml schema are reported as errors. If set to false , they are reported as warnings. make -f Makefile.mta p=cf strict=false How to build an MTA archive from the modules' build artifacts mbt assemble Creates an MTA archive MTAR file from the module build artifacts according to the MTA deployment descriptor ( mtad.yaml file). Note : Make sure the path property of each module's mtad.yaml file points to the module's build artifacts that you want to package into the target MTA archive. Usage: mbt assemble flags Flags: Flag Mandatory / Optional Description Examples -s (--source) Optional The path to the folder where the project\u2019s mtad.yaml file is located; the current path is set as the default. mbt assemble -s=C:/TestProject -t (--target) Optional The folder for the generated MTAR file. If this parameter is not provided, the MTAR file is saved in the mta_archives subfolder of the current folder. If the parameter is provided, the MTAR file is saved in the root of the folder provided by the argument. mbt assemble -t=C:/TestFolder -m (--mtar) Optional The name of the generated archive file. If this parameter is omitted, the file name is created according to the following naming convention: mta_application_ID _ mta_application_version .mtar If the parameter is provided, but does not include an extension, the .mtar extension is added. mbt assemble -m=anotherName -e (--extensions) Optional The path or paths to multitarget application extension files (.mtaext). Several extension files separated by commas can be passed with a single flag, or each extension file can be specified with its own flag. mbt build -e=test1.mtaext,test2.mtaext or mbt build -e=test1.mtaext -e=test2.mtaext","title":"Usage"},{"location":"usage/#how-to-get-help-on-the-tools-commands","text":"Command Usage Description help mbt -h Prints all the available commands. help mbt [command] --help or mbt [command] -h Prints detailed information about the specified command.","title":"How to get help on the tools commands"},{"location":"usage/#how-to-find-out-the-version-of-the-installed-tool","text":"Command Usage Description version mbt -v Prints the current Cloud MTA Build Tool version.","title":"How to find out the version of the installed tool"},{"location":"usage/#how-to-build-an-mta-archive-from-the-project-sources","text":"","title":"How to build an MTA archive from the project sources"},{"location":"usage/#overview","text":"You can use one of the following two approaches for building your MTA project: - One-step build using the mbt build command - Two-step build using a combination of the mbt init and make commands. Both methods leverage the GNU Make technology for the actual build. If you are using the one-step approach, the tool generates a temporary build configuration file and automatically invokes the make command. The generated Makefile is then deleted at the end of the build. The second approach allows you to generate the Makefile using the mbt init command. You can adjust the generated file according to your project needs and then build the MTA archive using the make command. In this case, we recommend that you include the generated Makefile in the project's source control management system to ensure that the same build process is applied across all the project's contributors, regardless of the build environment.","title":"Overview"},{"location":"usage/#prerequisites","text":"GNU Make 4.2.1 is installed in your build environment. Module build tools are installed in your build environment. For more information, see the corresponding Download and Installation sections .","title":"Prerequisites"},{"location":"usage/#one-step-build","text":"Quick start example: // Executes the MTA project build for the Cloud Foundry target environment. mbt build mbt build Generates a temporary Makefile according to the MTA descriptor and runs the make command to package the MTA project into the MTA archive. Usage: mbt build flags Flags: Flag Mandatory / Optional Description Examples -p (--platform) Optional The name of the target deployment platform. The supported deployment platforms are: cf for SAP Cloud Platform Cloud Foundry environment neo for the SAP Cloud Platform Neo environment xsa for the SAP HANA XS advanced model If this parameter is not provided, the project is built for the SAP Cloud Platform Cloud Foundry environment mbt build -p=cf -s (--source) Optional The path to the MTA project; the current path is set as the default. mbt build -p=cf -s=C:/TestProject -t (--target) Optional The folder for the generated MTAR file. If this parameter is not provided, the MTAR file is saved in the mta_archives subfolder of the current folder. If the parameter is provided, the MTAR file is saved in the root of the folder provided by the argument. mbt build -p=cf -t=C:/TestProject --mtar Optional The file name of the generated archive file. If this parameter is omitted, the file name is created according to the following naming convention: mta_application_ID _ mta_application_version .mtar If the parameter is provided, but does not include an extension, the .mtar extension is added. mbt build -p=cf --mtar=TestProject.mtar -e (--extensions) Optional The path or paths to multitarget application extension files (.mtaext). Several extension files separated by commas can be passed with a single flag, or each extension file can be specified with its own flag. mbt build -e=test1.mtaext,test2.mtaext or mbt build -e=test1.mtaext -e=test2.mtaext --strict Optional The default value is true . If set to true , the duplicated fields and fields that are not defined in the mta.yaml schema are reported as errors. If set to false , they are reported as warnings. mbt build -p=cf --strict=true BETA -m (--mode) Optional The possible value is verbose . If run with this option, the temporary Makefile is generated in a way that allows the parallel execution of Make jobs to make the build process faster. mbt build -m=verbose BETA -j (--jobs) Optional Used only with the --mode parameter. This option configures the number of Make jobs that can run simultaneously. If omitted or if the value is less than or equal to zero, the number of jobs is defined by the number of available CPUs (maximum 8). mbt build -m=verbose -j=8","title":"One-step build"},{"location":"usage/#two-step-build","text":"Quick start example: // Generates the `Makefile.mta` file. mbt init // Executes the MTA project build for Cloud Foundry target environment. make -f Makefile.mta p=cf mbt init Generates the Makefile.mta file according to the MTA descriptor (mta.yaml file). The make command uses the generated Makefile.mta file to package the MTA project. Usage: mbt init flags Flags: Flag Mandatory / Optional Description Examples -s (--source) Optional The path to the MTA project; the current path is set as the default. mbt init -s=C:/TestProject -t (--target) Optional The path to the generated Makefile folder; the current path is set as the default. mbt init -t=C:/TestFolder -e (--extensions) Optional The path or paths to multitarget application extension files (.mtaext). Several extension files separated by commas can be passed with a single flag, or each extension file can be specified with its own flag. mbt build -e=test1.mtaext,test2.mtaext or mbt build -e=test1.mtaext -e=test2.mtaext make Packages the MTA project into the MTA archive according to the Makefile . Usage: make parameters Parameters: Parameter Type Mandatory / Optional Description Examples -f path to Makefile.mta string Mandatory The path to the Makefile.mta file that contains the build configurations. make -f Makefile.mta p=cf p string Mandatory The name of the target deployment platform. The supported deployment platforms are: cf for the SAP Cloud Platform Cloud Foundry environment neo for the SAP Cloud Platform Neo environment xsa for the SAP HANA XS advanced model make -f Makefile.mta p=cf t string Optional The folder for the generated MTAR file. If this parameter is not provided, the MTAR file is saved in the mta_archives subfolder of the current folder. If the parameter is provided, the MTAR file is saved in the root of the folder provided by the argument. make -f Makefile.mta p=cf t=C:\\temp mtar string Optional The file name of the generated archive file. If this parameter is omitted, the file name is created according to the following naming convention: mta_application_ID _ mta_application_version .mtar If the parameter is provided, but does not include an extension, the .mtar extension is added. make -f Makefile.mta p=cf mtar=myMta make -f Makefile.mta p=cf mtar=myMta.mtar strict Boolean Optional The default value is true . If set to true , the duplicated fields and fields that are not defined in the mta.yaml schema are reported as errors. If set to false , they are reported as warnings. make -f Makefile.mta p=cf strict=false","title":"Two-step build"},{"location":"usage/#how-to-build-an-mta-archive-from-the-modules-build-artifacts","text":"mbt assemble Creates an MTA archive MTAR file from the module build artifacts according to the MTA deployment descriptor ( mtad.yaml file). Note : Make sure the path property of each module's mtad.yaml file points to the module's build artifacts that you want to package into the target MTA archive. Usage: mbt assemble flags Flags: Flag Mandatory / Optional Description Examples -s (--source) Optional The path to the folder where the project\u2019s mtad.yaml file is located; the current path is set as the default. mbt assemble -s=C:/TestProject -t (--target) Optional The folder for the generated MTAR file. If this parameter is not provided, the MTAR file is saved in the mta_archives subfolder of the current folder. If the parameter is provided, the MTAR file is saved in the root of the folder provided by the argument. mbt assemble -t=C:/TestFolder -m (--mtar) Optional The name of the generated archive file. If this parameter is omitted, the file name is created according to the following naming convention: mta_application_ID _ mta_application_version .mtar If the parameter is provided, but does not include an extension, the .mtar extension is added. mbt assemble -m=anotherName -e (--extensions) Optional The path or paths to multitarget application extension files (.mtaext). Several extension files separated by commas can be passed with a single flag, or each extension file can be specified with its own flag. mbt build -e=test1.mtaext,test2.mtaext or mbt build -e=test1.mtaext -e=test2.mtaext","title":"How to build an MTA archive from the modules' build artifacts"}]}