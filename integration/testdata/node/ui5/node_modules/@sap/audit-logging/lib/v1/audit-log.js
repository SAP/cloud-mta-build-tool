'use strict';

var currentTransport = require('../transports/current-transport');
var ConfigurationChangeMessage = require('./ConfigurationChangeMessage');
var DataModificationMessage = require('./DataModificationMessage');
var DataAccessMessage = require('./DataAccessMessage');
var SecurityEventMessage = require('./SecurityEventMessage');
var format = require('util').format;
var utils = require('../utils');


module.exports = function auditlog(credentials) {

  var transport = currentTransport(credentials, { url: '/audit-log/v1/' });

  return {
    configurationChange: function (objectID) {
      utils.validate.notEmptyString(objectID, 'Object ID');
      return new ConfigurationChangeMessage({ 'object_id': objectID }, transport);
    },

    updateConfigurationChange: function (configurationChangeId, state) {
      return {
        log: function (callback) {
          transport.updateConfigurationChange(configurationChangeId, state, callback);
        }
      };
    },

    updateDataModification: function (dataModificationId, state) {
      return {
        log: function (callback) {
          transport.updateDataModification(dataModificationId, state, callback);
        }
      };
    },

    read: function (objectID) {
      utils.validate.notEmptyString(objectID, 'Object ID');
      return new DataAccessMessage({ 'object_id': objectID }, transport);
    },

    update: function (objectID) {
      utils.validate.notEmptyString(objectID, 'Object ID');
      return new DataModificationMessage({ 'object_id': objectID }, transport);
    },

    securityMessage: function () {
      utils.validate.provided(arguments[0], 'An argument');
      return new SecurityEventMessage({ data: format.apply(null, arguments) }, transport);
    }
  };
};
