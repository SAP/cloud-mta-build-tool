'use strict';

var assert = require('assert');
var debug = require('debug')('audit/transport');
var request = require('request');
var util = require('util');

function ServiceTransport(credentials, options) {
  checkCredentials(credentials);
  this.credentials = credentials;
  this.serviceURL = credentials.url + options.url;
  this.appInfo = process.env.VCAP_APPLICATION ? JSON.parse(process.env.VCAP_APPLICATION) : {};
}

ServiceTransport.prototype.log = function (message, callback) {
  var url = this.serviceURL + message._endpoint;
  var body = message._content;

  this._doRequest(url, 'POST', body, callback);
};

ServiceTransport.prototype.updateConfigurationChange = function (id, state, callback) {
  this._updateState('configuration-changes/', id, state, callback);
};

ServiceTransport.prototype.updateDataModification = function (id, state, callback) {
  this._updateState('data-modifications/', id, state, callback);
};

ServiceTransport.prototype._updateState = function (subPath, id, state, callback) {
  var url = this.serviceURL + subPath + id;
  var body = {
    success: state
  };

  this._doRequest(url, 'POST', body, callback);
};

ServiceTransport.prototype._doRequest = function(url, method, data, callback) {
  var headers = {
    'XS_AUDIT_APP': this.appInfo['application_name'],
    'XS_AUDIT_SPACE': this.appInfo['space_name'],
    'XS_AUDIT_ORG': this.appInfo['organization_name']
  };
  request({
    method: method,
    url: url,
    auth: {
      user: this.credentials.user,
      pass: this.credentials.password
    },
    headers: headers,
    json: true,
    body: data
  }, function(err, httpResponse, body) {
    debug('Auditlog request: %s %s\n headers: %j\n body: %j',
      method, url, headers, data);

    debug('Auditlog response: status %s\n body: %j',
      httpResponse && httpResponse.statusCode, body);

    if (err) {
      debug(err);
      return callback(err);
    }

    if (httpResponse.statusCode < 200 || httpResponse.statusCode >= 300) {
      var message = util.format('%s request to %s completed with status %d', method, url, httpResponse.statusCode);
      if (body) {
        var responseErr = body.error || body.errors || body;
        message += ': ' + JSON.stringify(responseErr);
      }
      err = new Error(message);

      return callback(err);
    }

    // body is undefined when response's status is 204 No content
    callback(null, body && body.id);
  });
};

function checkCredentials(credentials) {
  assert(credentials, 'credentials should be provided!');
  assert(credentials.user && credentials.password && credentials.url, 'credentials are missing information!');
}

module.exports = ServiceTransport;
