'use strict';

var constants = require('./constants');
var validation = require('./validation');
var descriptors = require('./field-descriptors');

var extend = Object.assign;
if (!extend) {
  // Support old node versions through legacy util._extend
  var util = require('util');
  extend = util._extend;
}


module.exports = Passport;

function Passport(encoded) {
  validation.validateHex(encoded, 'SAP Passport');
  this._content = new Buffer(encoded, 'hex');
}

Passport.HEADER_NAME = 'sap-passport';

Passport.prototype.readUniqueIdentifiers = function () {
  var result = {};
  descriptors.readableFields.forEach(function (descriptor) {
    result[descriptor.name] = readField(this._content, descriptor);
  }, this);
  return result;
};

Passport.prototype.serialize = function () {
  return this._content.toString('hex').toUpperCase();
};

Passport.prototype.compact = function () {
  if (this._content.length > constants.HANA_DB_LENGTH_LIMIT_IN_BYTES) {
    this._content = removeVariableParts(this._content);
  }
};

Passport.prototype.update = function (obj) {
  validation.validateObject(obj, 'Argument');
  obj = extend({ previousComponent: constants.DEFAULT_PREVIOUS_COMPONENT }, obj);

  descriptors.writableFields.forEach(function (descriptor) {
    var name = descriptor.name;
    descriptor.fnValidate(obj[name]);
    descriptor.fnWrite(this._content, obj[name], descriptor.startsAt, descriptor.length);
  }, this);
};

function readField(buffer, descriptor) {
  validation.validateBufferLength(buffer, descriptor.displayName, descriptor.startsAt, descriptor.length);
  return descriptor.fnRead(buffer, descriptor.startsAt, descriptor.length);
}

function removeVariableParts(buffer) {
  var fields = descriptors.fields;
  var buff1 = buffer.slice(0, fields.VAR_PARTS_COUNTER.startsAt);

  // set var parts counter and offset to 0
  var varPartsMetadataLen = fields.VAR_PARTS_COUNTER.length + fields.VAR_PARTS_OFFSET.length;
  var buff2 = new Buffer(varPartsMetadataLen).fill(0);

  var buff3 = new Buffer(constants.EYE_CATCHER, 'hex');

  // update the length field
  var newLength = buff1.length + buff2.length + buff3.length;
  var descriptor = fields.PASSPORT_LENGTH;
  descriptor.fnWrite(buff1, newLength, descriptor.startsAt, descriptor.length);

  return Buffer.concat([buff1, buff2, buff3], newLength);
}
