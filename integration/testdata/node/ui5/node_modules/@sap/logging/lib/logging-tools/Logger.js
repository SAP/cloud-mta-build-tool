'use strict';

var _ = require('lodash');
var assert = require('assert');
var common = require('./common');
var constants = require('../constants');
var normalizeComponent = require('../common').normalizeComponent;

module.exports = Logger;

function Logger(reqContext, category) {
  var appContext = reqContext._appContext;
  this._reqContext = reqContext;
  this.category = resolveCategory(category);
  this._winston = appContext._winstonLogger;
  this._mainTransportName = constants.TRANSPORT_NAMES.LOGGER;
  if (appContext.logLocation !== appContext.traceLocation) {
    this._tracer = reqContext.getTracer('Logger.js');
  }
}

function resolveCategory(category) {
  assert(_.isString(category), 'Category argument should be a string');
  assert(/^\//.test(category), 'Category should start with a forward slash');
  return normalizeComponent(category);
}

Logger.prototype.getLevel = function () {
  var levelsContainer = this._reqContext._appContext._levelsContainer;
  return levelsContainer.getLoggerLevel(this.category);
};

Logger.prototype.isEnabled = function (level) {
  return common.genericIsEnabled(level, constants.LOG_LEVELS, this.getLevel());
};

function addFunctionForEveryLevel(proto, availableLevels) {
  Object.keys(availableLevels).forEach(function (levelName) {
    proto[levelName] = function () {
      if (!this.isEnabled(levelName)) {
        return;
      }
      var arrArgs = Array.prototype.slice.call(arguments);
      logEntry(this, levelName, arrArgs);
      if (this._tracer) {
        this._tracer._traceLogEntry(levelName, arrArgs);
      } else if (common.isError(arrArgs[0])) {
        // trace error stack, all the other arguments were already logged above
        this._reqContext.getTracer('Logger.js')._traceLogEntry(levelName, [arrArgs[0]]);
      }
    };
  }, this);
}

addFunctionForEveryLevel(Logger.prototype, constants.LOG_LEVELS);

function logEntry(logger, levelName, arrArgs) {
  var levelsContainer = logger._reqContext._appContext._levelsContainer;
  logger._winston.transports[logger._mainTransportName].level = levelsContainer.getLoggerLevel(logger.category);

  var error;
  arrArgs = arrArgs.slice(); // do not modify the original
  if (common.isError(arrArgs[0])) {
    error = arrArgs.shift();
  }
  var message = common.createMessage(arrArgs);
  var meta = {
    messageContext: {
      reqContext: logger._reqContext._shorten(),
      category: logger.category,
      error: error
    }
  };
  logger._winston[levelName](message, meta);
}
