'use strict';

var _ = require('lodash');
var assert = require('assert');
var constants = require('./constants');
var starMatch = require('./star-match');

module.exports = LevelsContainer;

function LevelsContainer() {
  this._mappings = [];
}

LevelsContainer.prototype.setLevel = function (componentPattern, level) {
  assert(_.isString(componentPattern), 'Component pattern should be a string');
  assert(_.isString(level), 'Level should be a string');
  this._mappings.push({ pattern: componentPattern, regex: starMatch.buildRegExp(componentPattern), level: normalizeLevel(level) });
};

LevelsContainer.prototype.unsetLevel = function (componentPattern) {
  assert(_.isString(componentPattern), 'Component pattern should be a string');
  _.remove(this._mappings, function (mapping) {
    return mapping.pattern === componentPattern;
  });
};

function normalizeLevel(level) {
  level = level.toLowerCase();
  assert(_.isNumber(constants.ALL_LEVELS[level]), 'Level not among the allowed values');
  return level;
}

LevelsContainer.prototype.getLoggerLevel = function (category) {
  return getLogLevelFromEnv() ||  toLoggerLevel(getLevel(this, category, constants.DEFAULT_LEVELS.LOGGER));
};

LevelsContainer.prototype.getTracerLevel = function (location) {
  return normalizeLevelFromEnv() || getLevel(this, location, constants.DEFAULT_LEVELS.TRACER);
};

function getLevel(levelsContainer, component, defaultLevel) {
  for (var i = levelsContainer._mappings.length - 1; i >= 0; i--) {
    if (levelsContainer._mappings[i].regex.test(component)) {
      return levelsContainer._mappings[i].level;
    }
  }
  return defaultLevel;
}


function normalizeLevelFromEnv() {
  var envValue = process.env.XS_APP_LOG_LEVEL;
  if (!envValue) {
    return null;
  }

  envValue = envValue.toLowerCase();
  var iLevel = constants.ALL_LEVELS[envValue];
  return (_.isNumber(iLevel)) ? envValue : null;
}

function getLogLevelFromEnv() {
  var envValue = normalizeLevelFromEnv();
  if (!envValue) {
    return null;
  }
  return toLoggerLevel(envValue);
}

function toLoggerLevel(levelName) {
  var iLevel = constants.ALL_LEVELS[levelName];
  if (iLevel >= constants.LOG_LEVELS.info) {
    return levelName;
  }
  return constants.MOST_VERBOSE_LEVEL.LOGGER;
}
