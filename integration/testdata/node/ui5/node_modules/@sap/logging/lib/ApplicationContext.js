'use strict';

var _ = require('lodash');
var util = require('util');
var assert = require('assert');
var winston = require('winston');

var constants = require('./constants');
var Trace = require('./formats/Trace');
var ListLog = require('./formats/ListLog');
var normalizeComponent = require('./common').normalizeComponent;

var RequestContext = require('./RequestContext');
var LevelsContainer = require('./LevelsContainer');
var IDGenerator = require('./value-generation/IDGenerator');


module.exports = ApplicationContext;

function ApplicationContext(options) {
  this._idGenerator = new IDGenerator();
  this._levelsContainer = new LevelsContainer();
  attachOptions(this, options);
  attachWinstonLoggers(this);
  enableRuntimeLevelChanging(this);
}

function enableRuntimeLevelChanging(appContext) {
  var RuntimeMessagingLib = loadXSRuntimeMessagingLib(appContext);
  if (RuntimeMessagingLib) {
    var rtConn = RuntimeMessagingLib.getRuntimeConnection();
    rtConn.on('ready', function () {
      var consumer = rtConn.consumer('SetLoggingLevel');
      consumer.on('handleDelivery', function onHandleDelivery(component, level) {
        if (level) {
          appContext.setLevel(component, level);
        } else {
          appContext.unsetLevel(component);
        }
      });
      appContext._consumer = consumer;
    });
    rtConn.unref();
    appContext._rtConn = rtConn;
  }
}

function loadXSRuntimeMessagingLib(appContext) {
  try {
    return require('sap_xsrt_messaging');
  } catch (exc) {
    appContext.getLogger('/LoggingLibrary').warning('Dynamic log level switching not available');
  }
}

ApplicationContext.prototype.setLevel = function (component, level) {
  this._levelsContainer.setLevel(normalizeComponent(component), level);
};

ApplicationContext.prototype.unsetLevel = function (component) {
  this._levelsContainer.unsetLevel(normalizeComponent(component));
};

ApplicationContext.prototype.createRequestContext = function (req, id) {
  return new RequestContext(this, req, id);
};

ApplicationContext.prototype.getLogger = function (category, id) {
  return this.createRequestContext(null, id || '').getLogger(category);
};

ApplicationContext.prototype.getTracer = function (location, id) {
  return this.createRequestContext(null, id || '').getTracer(location);
};

ApplicationContext.prototype._shorten = function() {
  return {
    csnComponent: this.csnComponent
  };
};

function attachOptions(appContext, options) {
  assert(options === undefined || _.isObject(options), 'Expected an object for application-wide options (if provided)');
  var opts = _.defaults({}, options, {
    logLocation: constants.STORAGE.CONSOLE,
    traceLocation: constants.STORAGE.CONSOLE
  });

  checkLocation(opts.logLocation, 'logLocation');
  checkLocation(opts.traceLocation, 'traceLocation');
  checkSameFile(opts.logLocation, opts.traceLocation);
  assert(opts.csnComponent === undefined || _.isString(opts.csnComponent), '"csnComponent" (if provided) should be a string');

  appContext.logLocation = opts.logLocation;
  appContext.traceLocation = opts.traceLocation;
  appContext.csnComponent = opts.csnComponent;
}

function checkLocation(location, propertyName) {
  var message = util.format('"%s" should be a string or one of the predefined values', propertyName);
  assert(_.isString(location) || location === constants.STORAGE.CONSOLE, message);
}

function checkSameFile(logLocation, traceLocation) {
  var sameFile = _.isString(logLocation) && _.isString(traceLocation) && logLocation === traceLocation;
  assert(!sameFile, 'It is not allowed logLocation and traceLocation to point to the same file');
}

function attachWinstonLoggers(appContext) {
  appContext._winstonLogger = createWinstonLogger(appContext);
  appContext._winstonTracer = createWinstonTracer(appContext);
}

function createWinstonLogger(appContext) {
  var logEntriesOptions = {
    name: constants.TRANSPORT_NAMES.LOGGER,
    level: constants.DEFAULT_LEVELS.LOGGER,
    stderrLevels: [],
    handleExceptions: false
  };
  var logEntriesTransport = createTransport(appContext.logLocation, logEntriesOptions, ListLog.createFormatter);

  return new winston.Logger({
    levels: constants.LOG_LEVELS, colors: constants.LOG_COLORS,
    transports: [logEntriesTransport]
  });
}

function createWinstonTracer(appContext) {
  var traceEntriesOptions = {
    name: constants.TRANSPORT_NAMES.TRACER,
    level: constants.DEFAULT_LEVELS.TRACER,
    stderrLevels: constants.CONSOLE_TRANSPORT.STD_ERR_LEVELS,
    handleExceptions: false
  };
  var traceEntriesTransport = createTransport(appContext.traceLocation, traceEntriesOptions, Trace.createFormatter);

  return new winston.Logger({
    levels: constants.TRACE_LEVELS, colors: constants.TRACE_COLORS,
    transports: [traceEntriesTransport]
  });
}

function createTransport(location, options, fnFormatterFactory) {
  var transport;
  if (typeof location === 'string') {
    transport = new winston.transports.File(_.extend({ filename: location, json: false }, options));
    transport.formatter = fnFormatterFactory(false, shouldLogUser());
  }
  if (location === constants.STORAGE.CONSOLE) {
    transport = new winston.transports.Console(options);
    transport.formatter = fnFormatterFactory(true, shouldLogUser());
  }
  return transport;
}

function shouldLogUser() {
  var setting = process.env.XS_LOG_USER;
  return (typeof setting === 'string') && (setting.toLowerCase() === 'true');
}
