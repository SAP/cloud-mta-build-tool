'use strict';

var moment = require('moment');
var colorize = require('winston').config.colorize;
var replaceNewLinesOnXSA = require('../common').replaceNewLinesOnXSA;

// Reference: http://help.sap.com/saphelp_nw73ehp1/helpdata/en/53/82dae7c2f5439a8afd1b0ee95c2e45/content.htm

exports.createFormatter = function (shouldUseColors, shouldLogUser) {
  return function (options) {
    return buildEntry(options.message, options.level, options.meta.messageContext, shouldUseColors, shouldLogUser);
  };
};

function buildEntry(message, level, messageContext, shouldUseColors, shouldLogUser) {
  var reqContext = messageContext.reqContext;
  var appContext = reqContext._appContext;
  var error = messageContext.error;

  var FIELD_SEPARATOR = '#';

  if (error && error.message) {
    if (message) {
      message += ': ' + error.message; // like verror & Linux
    } else {
      message = error.message;
    }
  }

  var entry = [
    '2.0',
    moment().format('YYYY MM DD HH:mm:ss:SSS'),
    moment().format('Z'),
    (shouldUseColors) ? colorize(level, level.toUpperCase()) : level.toUpperCase(),
    processTextualValue(messageContext.category), // source name

    '', // message code
    processTextualValue(appContext.csnComponent),
    '', // dcComponent
    '', // GUID
    '', // correlation id

    '', // application
    '', // location
    (shouldLogUser) ? processTextualValue(reqContext._user) : '',
    processTextualValue(reqContext._sessionId),
    '', // transaction

    processPassportValue(reqContext, 'rootContextID'),
    processPassportValue(reqContext, 'transactionID'),
    processPassportValue(reqContext, 'connectionID'),
    processPassportValue(reqContext, 'connectionCounter'),

    processTextualValue(reqContext._id), // instead of Thread Name
    'PLAIN', // message type
    '', // resourceBundle
    processTextualValue(message)
  ];

  return FIELD_SEPARATOR + entry.join(FIELD_SEPARATOR) + FIELD_SEPARATOR;
}

function processPassportValue(reqContext, property) {
  return reqContext._passportFields ? reqContext._passportFields[property] : '';
}

function processTextualValue(value) {
  return value ? escapeSpecialCharacters(value) : '';
}

function escapeSpecialCharacters(message) {
  message = message.replace(/\\/g, '\\\\');
  message = message.replace(/#/g, '\\#');
  message = replaceNewLinesOnXSA(message);
  return message;
}
