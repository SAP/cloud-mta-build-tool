'use strict';

var https = require('https');
var expressSession = require('express-session');
var passport = require('passport');
var xsenv = require('@sap/xsenv');
var tokenUtils = require('./utils/token-utils');
var bodyParser = require('body-parser');

var additionalHeadersMiddleware = require('./middleware/additional-headers-middleware');
var agents = require('./backend-request/agents');
var authorizationMiddleware = require('./middleware/authorization-middleware');
var cannotProcessRequestMiddleware = require('./middleware/cannot-process-request-middleware');
var compressionMiddleware = require('./middleware/compression-middleware');
var configuration = require('./configuration');
var connect = require('./connect/connect');
var cookieUtils = require('./utils/cookie-utils');
var connectUtilsMiddleware = require('./middleware/connect-utils-middleware');
var errorHandler = require('./middleware/error-handler');
var extensions = require('./extensions/extensions');
var httpMethodMatchingMiddleware = require('./middleware/http-method-matching-middleware');
var jwtRefreshMiddleware = require('./middleware/jwt-refresh-middleware');
var logging = require('./utils/logger');
var loginCallbackMiddleware = require('./middleware/login-callback-middleware');
var loginMiddleware = require('./middleware/login-middleware');
var logoutMiddleware = require('./middleware/logout-middleware');
var memstoreConfig = require('./configuration/memstore-config');
var oauthConfig = require('./passport/oauth-configuration');
var pathRewritingMiddleware = require('./middleware/path-rewriting-middleware');
var pluginEndpointMiddleware = require('./middleware/plugin-middleware');
var requestHandler = require('./middleware/request-handler');
var secureCookieMiddleware = require('./middleware/secure-cookie-middleware');
var sessionCookieMiddleware = require('./middleware/session-cookie-middleware');
var staticResourceHandler = require('./middleware/static-resource-handler');
var traceRequestMiddleware = require('./middleware/trace-request-middleware');
var welcomePageMiddleware = require('./middleware/welcome-page-middleware');
var whitelistServiceMiddleware = require('./middleware/whitelist-service-middleware');
var xsrfTokenMiddleware = require('./middleware/xsrf-token-middleware');
var attachRouterConfig = require('./middleware/attach-router-config');
var corsMiddleware = require('./middleware/cors-middleware');
var serviceTokenMiddleware = require('./middleware/service-token-middleware');
var destinationTokenMiddleware = require('./middleware/destination-token-middleware');
var subscriptionMiddleware = require('./middleware/subscription-middleware');
var cacheRequestMiddleware = require('./middleware/cache-request-middleware');

module.exports = function bootstrap(options) {
  var certificates = xsenv.loadCertificates();
  agents.httpsAgent.options.ca = certificates;
  https.globalAgent.options.ca = certificates;

  var ext = extensions(options.extensions);
  var routerConfig = configuration.load(options);

  var app = connect();
  // can be overridden by per-request routerConfig
  app.set('mainRouterConfig', routerConfig);

  app.use(logging.getExpressMiddleware());
  app.use(connectUtilsMiddleware(app));
  app.use(traceRequestMiddleware);
  app.use('/callback/v1.0/tenants', bodyParser.json());

  ext.insertMiddleware('first', app);

  app.use(attachRouterConfig);
  app.use(subscriptionMiddleware);
  app.use(corsMiddleware);

  var sessionSecret = (options.getSessionSecret || cookieUtils.generateSessionSecret)();
  app.set('sessionCookieKey', sessionSecret);
  tokenUtils.getTokens(app);
  var memoryStore = memstoreConfig.getMemoryStore(app);
  app.set('memoryStore', memoryStore);

  var cookieName = cookieUtils.getSessionCookieName();
  app.set('cookieName', cookieName);

  app.use(additionalHeadersMiddleware);
  app.use(welcomePageMiddleware);
  app.use(pathRewritingMiddleware);
  app.use(expressSession({
    name: cookieName,
    resave: false,
    saveUninitialized: false,
    secret: sessionSecret,
    store: memoryStore,
    cookie: { secure: routerConfig.secureSessionCookie },
    proxy: true
  }));

  passport.serializeUser(oauthConfig.getUserSerializer);
  passport.deserializeUser(oauthConfig.getUserDeserializer);
  app.use(passport.initialize());
  app.use(passport.session());

  if (routerConfig.secureSessionCookie === true) {
    app.use(secureCookieMiddleware);
  }

  app.use(routerConfig.appConfig.login.callbackEndpoint, loginCallbackMiddleware);
  app.use(loginMiddleware);
  if (routerConfig.jwtRefresh !== 0) {
    app.use(jwtRefreshMiddleware);
  }
  app.use(authorizationMiddleware);
  app.use(xsrfTokenMiddleware);
  app.use(serviceTokenMiddleware);
  app.use(destinationTokenMiddleware);
  app.use(cacheRequestMiddleware);
  var pluginMetadataEndpoint = routerConfig.appConfig.pluginMetadataEndpoint;
  pluginMetadataEndpoint && app.use(pluginMetadataEndpoint, pluginEndpointMiddleware);
  app.use(logoutMiddleware);
  var whitelistService = routerConfig.appConfig.whitelistService;
  whitelistService && app.use(whitelistService.endpoint, whitelistServiceMiddleware);

  var compressionOptions = routerConfig.appConfig.compression;
  compressionOptions.enabled && app.use(compressionMiddleware(compressionOptions));

  ext.insertMiddleware('beforeRequestHandler', app);

  app.use(httpMethodMatchingMiddleware);
  app.use(staticResourceHandler);
  app.use(sessionCookieMiddleware(cookieName));
  app.use(requestHandler);

  ext.insertMiddleware('beforeErrorHandler', app);
  app.use(cannotProcessRequestMiddleware);
  app.use(errorHandler);

  return app;
};