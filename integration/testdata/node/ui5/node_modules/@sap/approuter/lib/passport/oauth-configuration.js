'use strict';

var _ = require('lodash');
var VError = require('verror');
var OAuth2Strategy = require('./oauth2-strategy');
var BasicOAuth2Strategy = require('./basic-oauth2-strategy');
var utils = require('./utils');

module.exports = {
  getUserSerializer: function (user, callback) {
    if (user && user.name) {
      callback(null, JSON.stringify(user));
    } else {
      callback(new Error('No user name found'));
    }
  },

  getUserDeserializer: function (sUser, callback) {
    if (sUser === '') {
      return callback(null, {});
    }
    var user;
    try {
      user = JSON.parse(sUser);
    } catch (err) {
      return callback(new VError(err, 'Could not parse user %s', sUser));
    }
    var error = user ? null : new VError('User not found %s', sUser);
    callback(error, user);
  },

  getXSUAAOauthStrategy: function (req, cb) {
    createStrategy(req, function(err, options, doneCallback) {
      if (err) { return cb(err); }
      cb(null, new OAuth2Strategy(options, doneCallback));
    });
  },

  getBasicOauthStrategy: function (req, credentials, cb) {
    createStrategy(req, function(err, options, doneCallback) {
      if (err) { return cb(err); }
      cb(null, new BasicOAuth2Strategy(_.assign(options, credentials), doneCallback));
    });
  }
};

function createStrategy(req, cb) {
  utils.loadOauthOptions(req, function(err, options) {
    if (err) { return cb(err); }

    function authenticationDone(req, params, done) {
      var tokenContext = {
        accessToken: params['access_token'],
        refreshToken: params['refresh_token'],
        expiresIn: params['expires_in'],
        scope: params.scope,
        oauthOptions: options
      };

      utils.storeToken(req, tokenContext, function(err) {
        if (!err) {
          req.app.approuter.emit('login', req.session);
        }
        done.apply(null, arguments);
      });
    }

    cb(null, options, authenticationDone);
  });
}
