'use strict';

var http = require('http');
var util = require('util');
var headerUtil = require('../utils/header-util');
var send = require('send');
var VError = require('verror').VError;

var CONNECTION_ERROR_CODES = {
  ECONNRESET: true,
  ECONNREFUSED: true
};

module.exports = function errorHandler(err, req, res, next) { // eslint-disable-line no-unused-vars
  if (typeof err === 'string') {
    err = new Error(err);
  }
  var status = err.status || 500;
  var headers = err.headers || {};
  var tracer = req.loggingContext.getTracer(__filename);
  var logger = req.loggingContext.getLogger('/Handler');

  logger.error('%s request to %s completed with status %d - %s', req.method, req.url, status, err.message);
  tracer.debug(err);
  if (CONNECTION_ERROR_CODES[findErrCode(err)]) {
    tracer.info('Check your proxy and network settings.');
  }

  var routerConfig = req.routerConfig || req.app.get('mainRouterConfig');
  var redirectPage = routerConfig.appConfig.errorPage.get(status);
  if (redirectPage) {
    tracer.debug('Redirecting to error page: ' + redirectPage);
    send(req, redirectPage, { index: false, root: routerConfig.workingDir })
      .on('error', function (err) {
        var verr = new VError(err, 'Unable to fetch custom error page: %s', redirectPage);
        endRequest(res, status, headers, verr);
      })
      .on('directory', function () {
        var verr = new VError(err, 'Custom error page is a directory: %s', redirectPage);
        endRequest(res, status, headers, verr);
      })
      .on('headers', function (res) { res.statusCode = status; })
      .pipe(res);
    return;
  }
  endRequest(res, status, headers, err);
};

function endRequest(res, status, headers, err) {
  if (res.headersSent) {
    return;
  }
  res.setHeader('Cache-Control', headerUtil.NOCACHE_HEADER_VALUE);
  res.writeHead(status, headers);
  var message = http.STATUS_CODES[status];
  if (err && process.env.NODE_ENV === 'development') {
    message = util.format('%d: %s\t%s', status, message, err.stack);
  }
  res.end(message);
}

function findErrCode(err) {
  if (!err) {
    return;
  }
  if ('code' in err) {
    return err.code;
  }
  if (typeof err.cause === 'function') {
    return findErrCode(err.cause());
  }
}
