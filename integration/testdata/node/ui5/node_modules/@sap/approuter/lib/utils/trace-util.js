'use strict';

var HEADERS_TO_MASK = ['authorization', 'cookie', 'set-cookie'];
var PARAMETERS_TO_MASK = ['code', 'password'];

exports.traceIncomingRequest = function (tracer, req) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Incoming request to AppRouter. Path:', req.url, 'Method:', req.method, 'Headers:', exports.stringifyHeaders(req.headers));
  }
};

exports.traceBackendRequest = function (tracer, url, requestOptions) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Request to backend. Rewritten URL:', url, 'Method:', requestOptions.method, 'Headers:', exports.stringifyHeaders(requestOptions.headers));
  }
};

exports.traceBackendResponse = function (tracer, backendRes) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Response from backend. Status:', backendRes.statusCode, 'Headers:', exports.stringifyHeaders(backendRes.headers));
  }
};

exports.traceOutgoingResponse = function (tracer, res) {
  if (tracer.isEnabled('debug')) {
    tracer.debug('Response from AppRouter. Status:', res.statusCode, 'Headers:', exports.stringifyHeaders(res._headers));
  }
};

exports.requestTraceEnabled = process.env.REQUEST_TRACE === 'true';

exports.stringifyQueryParameters = stringifyToLogFormat.bind(null, PARAMETERS_TO_MASK);
exports.stringifyHeaders = stringifyToLogFormat.bind(null, HEADERS_TO_MASK);

function stringifyToLogFormat(blacklist, entity) {
  blacklist = blacklist || [];
  var loggedItem = {};
  if (typeof entity === 'string' || typeof entity === 'number') {
    loggedItem['item'] = entity;
  } else {
    for (var item in entity) {
      if (Object.prototype.hasOwnProperty.call(entity,item)) {
        if (blacklist.indexOf(item) !== -1) {
          loggedItem[item] = '***';
        } else {
          loggedItem[item] = entity[item];
        }
      }
    }
  }
  return JSON.stringify(loggedItem, null, 2);
}
