'use strict';
var cookie = require('cookie');
var cookieUtils = require('../utils/cookie-utils');
var headerUtil = require('../utils/header-util');
var oauthConfig = require('../passport/oauth-configuration.js');
var passport = require('passport');
var url = require('url');
var VError = require('verror').VError;

module.exports = function passportLogin(req, res, next) {
  if (req.method !== 'GET') {
    return next();
  }
  if (process.env.PRESERVE_FRAGMENT !== 'false') {
    req.res = res;
  }
  oauthConfig.getXSUAAOauthStrategy(req, function(err, strategy) {
    if (err) {
      return next(err);
    }
    passport.use(strategy);
    passport.authenticate(strategy.name, function (err, user) {
      if (err) {
        var error = new VError(err, 'Could not authenticate with UAA');
        error.status = err.status;
        return next(error);
      }
      if (!user) {
        return sendRedirect(res, '/');
      }
      req.logIn(user, function (err) {
        if (err) {
          return next(err);
        }
        var redirectCookieName = cookieUtils.getRedirectLocationCookieName();
        var fragmentCookieName = cookieUtils.getFragmentCookieName();

        if (!req.headers || !req.headers.cookie) {
          return sendRedirectCookieMissing(next, redirectCookieName);
        }

        var cookies = cookie.parse(req.headers.cookie);
        var redirectCookieValue = cookies[redirectCookieName];
        var fragmentCookieValue = cookies[fragmentCookieName];
        if (!redirectCookieValue) {
          return sendRedirectCookieMissing(next, redirectCookieName);
        }

        if (!isRelativeUrl(redirectCookieValue)) {
          return sendRedirectCookieError(next, 'Redirect path is invalid',
            new VError('%s must contain a relative path, got %s', redirectCookieName, redirectCookieValue));
        }

        var locationAfterLogin = cookie.serialize(redirectCookieName, '', { path: '/', maxAge: 0 });
        cookieUtils.setCookie(res, locationAfterLogin);

        // Fragment may be empty string, which is casted to false. Therefore check presence of key.
        if (cookies.hasOwnProperty(fragmentCookieName)) {
          var fragmentAfterLogin = cookie.serialize(fragmentCookieName, '', { path: '/', maxAge: 0 });
          cookieUtils.setCookie(res, fragmentAfterLogin);
        }

        if (cookies.hasOwnProperty('signature')) {
          var signature = cookie.serialize('signature', '', { path: '/', maxAge: 0 });
          cookieUtils.setCookie(res, signature);
        }

        sendRedirect(res, normalizeRelativePath(redirectCookieValue + (fragmentCookieValue || '')));
      });
    })(req, res, next);
  });
};

function isRelativeUrl(location) {
  var parsedUrl = url.parse(location);
  return !(parsedUrl.host || parsedUrl.protocol);
}

function sendRedirectCookieMissing(next, cookieName) {
  sendRedirectCookieError(next, 'Missing redirect information', new VError('Required cookie \'%s\' is missing in the request', cookieName));
}

function sendRedirectCookieError(next, message, err) {
  var error = new VError(err, 'Unable to redirect after successful authentication. %s.', message);
  error.status = 400;
  next(error);
}

// normalize path, so it will not lead to unexpecred redirect like '//google.com' for example
function normalizeRelativePath(path) {
  return path.trim().replace(/^\/*/, '/');
}

function sendRedirect(res, redirectLocation) {
  res.writeHead(302, {
    'Location': redirectLocation,
    'Cache-Control': headerUtil.NOCACHE_HEADER_VALUE
  });
  res.end();
}
