'use strict';

var _ = require('lodash');
var fs = require('fs');
var mustache = require('mustache');
var path = require('path');
var serveStatic = require('serve-static');
var VError = require('verror').VError;
var contentTypeUtil = require('../utils/content-type');

module.exports = function staticResourceHandler(req, res, next) {
  var url = req.internalUrl;
  if (!url || !url.route || !url.route.localDir) {
    return next();
  }
  var routerConfig = req.routerConfig;
  var tracer = req.loggingContext.getTracer(__filename);
  var fullDirName = path.resolve(routerConfig.workingDir, url.route.localDir);
  var cacheControl = url.route.cacheControl;
  cacheControl && res.setHeader('Cache-Control', cacheControl);
  tracer.info('[STATIC] Serving static path:', fullDirName);

  var replacements = url.route.replace;
  if (!replacements) {
    return serveStaticContent(fullDirName, req, res, next, url);
  }
  if (_.endsWith(url.pathname, '/')) {
    url.pathname += 'index.html';
  }
  var filePath = path.join(fullDirName, url.pathname);

  fs.realpath(filePath, function (err, resolvedPath) {
    if (err) {
      return sendError(req, new VError(err, 'error during fs.realpath'), next, 404, filePath);
    }
    if (!_.startsWith(resolvedPath, fullDirName)) {
      return sendError(req, new VError('Path traversal! Requested path: %s', resolvedPath), next, 403);
    }
    var isMatching = replacements.pathSuffixes.some(function (suffix) {
      return _.endsWith(url.pathname, suffix);
    });
    if (isMatching) {
      serveReplacedFile(resolvedPath, req, res, next, replacements.view);
    } else {
      serveStaticContent(fullDirName, req, res, next, url);
    }
  });
};

function serveStaticContent(fullDirName, req, res, next, url) {
  if (url.pathname === '') {
    req.url = path.join(url.pathname, path.sep);
  } else {
    req.url = url.pathname;
  }
  req.url = path.sep + (url.pathname || '');
  serveStatic(fullDirName, { cacheControl: false, fallthrough: false })(req, res, function (err) {
    if (!err) {
      err = new VError('failed to serve %s', req.url);
    }
    sendError(req, err, next, err.status || 404, fullDirName);
  });
}

function serveReplacedFile(filePath, req, res, next, view) {
  fs.readFile(filePath, 'utf8', function (err, data) {
    if (err) {
      return sendError(req, err, next, 404, filePath);
    }
    var responseData;
    try {
      responseData = mustache.render(data, view);
    } catch (error) {
      return sendError(req, new VError(error, 'error during mustache.render'), next, 500);
    }
    res.setHeader('Content-Type', contentTypeUtil.getContentType(filePath));
    res.end(responseData);
  });
}

function sendError(req, err, next, status, filePath) {
  filePath && req.loggingContext.getTracer(__filename).info('cannot read file: ' + filePath);
  err.status = status;
  next(err);
}
