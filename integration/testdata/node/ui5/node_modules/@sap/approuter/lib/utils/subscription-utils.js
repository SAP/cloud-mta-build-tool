'use strict';

var loggingUtils = require('./logger');
var logger = loggingUtils.getLogger('/Subscription');
var urlUtils = require('../utils/url-utils');
var xsenv = require('@sap/xsenv');
var xssec = require('@sap/xssec');
var uaaUtils = require('./uaa-utils');

exports.getDependencies = getDependencies;
exports.checkScopes = checkScopes;
exports.getApplicationURL = getApplicationURL;
exports.getError = getError;

function checkScopes(req, cb){
  try {
    var token = getToken(req);
    var ownUAACredentials = xsenv.cfServiceCredentials({label: 'xsuaa'});
    xssec.createSecurityContext(token, ownUAACredentials, function (err, ctx) {
      if (err) {
        cb(err, null);
      } else if (!ctx.checkLocalScope('Callback')) {
        logger.error('Missing the expected scope - Callback - in the call to create subscription');
        var error = getError('Forbidden - Missing the expected scope', 403);
        cb(error, null);
      } else {
        cb(null, true);
      }
    });
  } catch (error) {
    cb (error);
  }
}

function getToken (req){
  var authorization = req.headers.authorization;
  if (!authorization) {
    logger.error('Missing Authorization header');
    throw getError('Missing Authorization header', 401);
  }
  var parts = authorization.split(' ');
  if (parts.length < 2) {
    logger.error('Invalid Authorization header format');
    throw getError('Invalid Authorization header format', 400);
  }
  var scheme = parts[0];
  var token = parts[1];

  if (scheme.toLowerCase() !== 'bearer') {
    logger.error('Authorization header is not a Bearer token');
    throw getError('Authorization header is not a Bearer token', 401);
  }
  return token;
}


function getApplicationURL  (req, cb){
  var error = null;
  if (!req.body){
    error = getError('Bad request: Missing body', 400);
    return cb(error);
  }

  var subdomain = req.body.subscribedSubdomain;
  if (!subdomain) {
    error = getError('Bad request: Missing subscribedSubdomain', 400);
    return cb(error);
  }

  uaaUtils.getUaaConfig(req, function (err, uaaOptions) {
    if (err) {
      return cb(err);
    }
    if (!uaaOptions) {
      return cb('Invalid UAA options');
    }

    if (uaaOptions.tenantmode !== 'shared'){
      error = getError('Tenant mode should be shared', 500);
      return cb(error);
    }
    var url = req.protocol + '://' + urlUtils.getRedirectHost(req).replace(uaaOptions.identityzone,subdomain);
    return cb(null, url);
  });
}

function getError(errorStr, status){
  var error = new Error(errorStr);
  error.status = status;
  logger.error(errorStr);
  return error;
}

function getDependencies(){
  var dependenciesArray = [];
  var appId = null;
  var appName = null;
  var xsappname = null;
  if (process.env.VCAP_SERVICES)
  {
    var env = JSON.parse(process.env.VCAP_SERVICES);
    for (var svcName in env) {
      xsappname = appId = appName = null;

      var cred = env[svcName][0].credentials;
      if (svcName === 'destination'){
        appId = cred.xsappname;
        appName = svcName;
      } else if (cred.saasregistryappname){
        appId = cred.uaa.xsappname;
        appName = cred.saasregistryappname;
      } else if (cred.saasregistryenabled){
        xsappname = cred.uaa.xsappname;
      }
      var obj = null;
      if (appId && appName) {
        obj = {'appId': appId, 'appName': appName};
      } else if (xsappname){
        obj = {'xsappname': xsappname};
      }
      if (obj){
        dependenciesArray.push(obj);
      }
    }
    return dependenciesArray;
  }
}



