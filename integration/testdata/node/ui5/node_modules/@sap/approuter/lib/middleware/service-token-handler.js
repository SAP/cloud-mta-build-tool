'use strict';
var xsenv = require('@sap/xsenv');
var xssec = require('@sap/xssec');

module.exports = {
  replaceUserToken: function (req, cb) {
    var ownUAACredentials = xsenv.cfServiceCredentials({label: 'xsuaa'});
    var externalServiceCredentials = req.internalUrl.route.credentials;
    var routerConfig = req.routerConfig;
    if (routerConfig && routerConfig.getToken) {
      routerConfig.getToken(req, function (err, accessToken) {
        if (err) {
          return cb(err);
        }
        module.exports.getBusinessToken(accessToken, ownUAACredentials, externalServiceCredentials, cb);
      });
    } else {
      var jwt = req.session.user.token.accessToken;
      module.exports.getBusinessToken(jwt, ownUAACredentials, externalServiceCredentials, cb);
    }
  },


  getBusinessToken: function (jwt, ownUAACredentials, externalServiceCredentials, cb) {
    try {
      xssec.createSecurityContext(jwt, ownUAACredentials, function (error, secContext) {
        if (error) {
          cb(error, null);
        } else {
          secContext.requestTokenForClient(Object.assign({}, externalServiceCredentials.uaa, {
            url: externalServiceCredentials.uaa.url.replace(
              externalServiceCredentials.uaa.identityzone,
              secContext.subdomain
            )
          }), null, function (error, jwt) {
            if (error) {
              cb(error, null);
            } else {
              cb(null, jwt);
            }
          });
        }
      });
    } catch (err) {
      cb(err);
    }
  }
};