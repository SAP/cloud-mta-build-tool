'use strict';

var serviceTokenHandler = require('./service-token-handler');
var jwtDecode = require('jwt-decode');
var expiresAt = require('../passport/utils').getExpiresAt;
var businessServiceUtils = require('../utils/business-service-utils');
var sessionExt = require('../utils/session-ext');

module.exports = function (req, res, next) {
  if (!isBusinessServiceScenario(req)) {
    return next();
  }
  shouldAskBusinessToken(req, function(err, askForToken){
    if (err) {
      return next(err);
    }
    if (!askForToken) {
      return next();
    }
    serviceTokenHandler.replaceUserToken(req, function(err, accessToken) {
      if (process.env.NODE_ENV === 'development') {
        req.session.user = {};
      }
      if (err) { return next(err); }
      var serviceTag = req.internalUrl.route.service;
      var tokenDecoded = jwtDecode(accessToken);
      sessionExt.update(req.session, function(// eslint-disable-next-line
session) {
        if (!req.session.user.businessServices) {
          req.session.user.businessServices = {};
        }
        req.session.user.businessServices[serviceTag] = {accessToken:  accessToken, expireDate:  expiresAt(tokenDecoded.exp - tokenDecoded.iat).getTime()};
      });
      return next();
    });
  });
};

function isBusinessServiceScenario(req){
  if (!req.internalUrl || !req.internalUrl.route || !req.internalUrl.route.service) {
    return false;
  }
  if (req.internalUrl.route.credentials && businessServiceUtils.getGrantType(req.internalUrl.route.credentials) === 'user_token'){
    return true;
  }
  return false;
}

function shouldAskBusinessToken(req, cb){
  if (process.env.NODE_ENV === 'development') {
    return cb(null, true);
  }

  if (!req.session || !req.session.user){
    return cb(new Error('Route with service needs oauth authentication'));
  }
  var serviceTag = req.internalUrl.route.service;

  if (!req.session.user.businessServices || !req.session.user.businessServices[serviceTag] || req.session.user.businessServices[serviceTag].expireDate < Date.now()) { // no token for current business service or token expired - ask for token
    return cb(null, true);
  }

  return cb(null, false);
}
