'use strict';

var async = require('async');
var http = require('http');
var https = require('https');
var WsProxy = require('./websockets/WsProxy');

function Server(server, wsServer) {
  this._server = server;
  this._wsServer = wsServer;
}

Server.prototype.close = function (callback) {
  async.parallel([
    this._server.close.bind(this._server),
    this._wsServer.close.bind(this._wsServer)
  ], callback);
};

exports.start = function (app, callback) {
  var routerConfig = app.get('mainRouterConfig');
  var server;
  if (routerConfig.httpsOptions) {
    server = https.createServer(routerConfig.httpsOptions, app);
  } else {
    server = http.createServer(app);
  }
  if (routerConfig.incomingConnectionTimeout !== undefined) {
    server.timeout = routerConfig.incomingConnectionTimeout;
  }
  var wsServer = new WsProxy(app);
  wsServer.listen(server);

  server.on('error', callback);
  server.listen(routerConfig.serverPort, function () {
    app.logger.info('Application router is listening on port: ' +
      server.address().port);
    callback(undefined, new Server(server, wsServer));
  });
};

