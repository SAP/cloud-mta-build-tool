'use strict';

var _ = require('lodash');
var url = require('url');
var uuid = require('uuid/v4');
var headerUtil = require('../utils/header-util');
var pathUtil = require('../utils/path-util');
var businessServiceUtils = require('../utils/business-service-utils');
var dynamicRoutingUtils = require('../utils/dynamic-routing-utils');

var HEADERS_TO_REMOVE = ['connection',
  'keep-alive',
  'public',
  'proxy-authenticate',
  'transfer-encoding',
  'upgrade',
  'sec-websocket-key'];

exports.getHeaders = function (req, accessToken, destination) {
  var headers;
  var route;
  var tokens = {
    accessToken: accessToken
  };
  if (req) {
    tokens.accessToken = tokens.accessToken || (req.session && req.session.user && req.session.user.token &&
          req.session.user.token.accessToken);
    destination = destination || req.internalUrl.destination;
    var servicePreserveHostHeader = req.internalUrl && req.internalUrl.route && req.internalUrl.route.service &&
                                    req.internalUrl.route.credentials && req.internalUrl.route.credentials.preserve_host_header;

    if ((destination && destination.preserveHostHeader) || servicePreserveHostHeader) {
      headers = _.omit(req.headers, HEADERS_TO_REMOVE);
    } else {
      headers = _.omit(req.headers, HEADERS_TO_REMOVE.concat(['host']));
    }
    if (destination && destination['sap-client']) {
      headers['sap-client'] = destination['sap-client'];
    }

    addCorrleationIdHeader(headers, req);
    addXForwardingHeaders(headers, req);
    removeSecurityHeaders(headers, req);
    headerUtil.updateSapPassport(headers);
    tokens['connProxyToken'] = req.app && req.app.connProxyToken && req.app.connProxyToken.accessToken;
    tokens['html5AppsRepoToken'] = req.app && req.app.html5AppsRepoToken && req.app.html5AppsRepoToken.accessToken;
    tokens['authToken'] = tokens.authToken || (req.session && req.session.user && req.session.user.destinations
      && req.session.user.destinations[destination.name]
      && req.session.user.destinations[destination.name].authToken
      && req.session.user.destinations[destination.name].authToken.token);
    route = req.internalUrl ? req.internalUrl.route : null;
    if (route && route.service === 'html5-apps-repo-rt') {
      var appKey = dynamicRoutingUtils.getApplicationKey(req);
      if (appKey && appKey.appPrefix) {
        addAppHostIdHeader(appKey.appPrefix, headers);
      }
    }
  }
  return addOauthHeader(headers || {}, tokens, route, destination);
};

function removeSecurityHeaders(headers, req) {
  if (!pathUtil.isPublicPath(req)) {
    delete headers['authorization'];
    if (pathUtil.isCsrfProtectionEnabled(req)) {
      delete headers['x-csrf-token'];
    }
  }
}

function addOauthHeader(headers, tokens, route, destination) {
  if (route && route.destination) { // Destination flow
    if (destination.proxyType && destination.proxyType === 'OnPremise') { // On premise destination flow - cloud connector
      headers['SAP-Connectivity-Authentication'] = 'Bearer ' + tokens.accessToken;
      headers['Proxy-Authorization'] = 'Bearer ' + tokens.connProxyToken;
      if (destination.cloudConnectorLocationId) {
        headers['SAP-Connectivity-SCC-Location_ID'] = destination.cloudConnectorLocationId;
      }
    } else { // Cloud destination flow
      if (tokens && tokens.accessToken && destination.forwardAuthToken && destination.forwardAuthToken === true) {
        headers.authorization = 'Bearer ' + tokens.accessToken;
      }
    }
    // Common for on premise and cloud destination flows
    if (destination.authentication === 'BasicAuthentication' && destination.user && destination.password) {
      headers.authorization = 'Basic ' + Buffer(destination.user + ':' + destination.password).toString('base64');
    } else if (destination.authentication === 'OAuth2SAMLBearerAssertion'){
      headers.authorization = 'Bearer ' + tokens['authToken'];
    }
  } else if (route && route.service) {// Service flow
    if (businessServiceUtils.getGrantType(route.credentials) !== 'user_token') {// html5 apps repo flow
      headers['authorization'] = 'Bearer ' + tokens.html5AppsRepoToken;
    } else {
      headers.authorization = 'Bearer ' + tokens.accessToken;
    }
  } else {// WS or Logout
    if (tokens && tokens.accessToken) {
      headers.authorization = 'Bearer ' + tokens.accessToken;
    }
  }
  return headers;
}

function addCorrleationIdHeader(headers, req) {

  if (req.headers['x-correlationid']) {
    return;
  }
  else if (req.headers['x-request-id']) {
    headers['x-correlationid'] = req.headers['x-request-id'];
  }
    else if (req.headers['x-vcap-request-id']){

      headers['x-correlationid'] = req.headers['x-vcap-request-id'];
    }
    else {
      headers['x-correlationid'] = uuid();
    }
}

function addXForwardingHeaders(headers, req) {
  if (req.headers.host) {
    headers['x-forwarded-host'] = req.headers.host;
  }
  if (!headers['x-forwarded-proto'] && req.protocol) {
    headers['x-forwarded-proto'] = req.protocol;
  }
  if (!headers['x-forwarded-for']) {
    headers['x-forwarded-for'] = req.connection.remoteAddress;
  }
  if (!headers['x-forwarded-path']) {
    headers['x-forwarded-path'] = url.parse(req.url).pathname;
  }
}

function addAppHostIdHeader(businessServiceName, headers) {
  var businessServiceCredentials = businessServiceUtils.getCredentials(businessServiceName, true);
  if (businessServiceCredentials && businessServiceCredentials['html5-apps-repo'] && businessServiceCredentials['html5-apps-repo']['app_host_id']) {
    headers['x-app-host-id'] = businessServiceCredentials['html5-apps-repo']['app_host_id'];
  }
}
