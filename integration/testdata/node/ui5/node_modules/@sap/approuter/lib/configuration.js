'use strict';

var _ = require('lodash');

var applicationConfig = require('./configuration/app-config');
var configurationUtils = require('./utils/configuration-utils');
var environment = require('./environment');
var environmentConfig = require('./configuration/env-config');
var uaaConfiguration = require('./configuration/uaa-config');
var validators = require('./configuration/validators');

module.exports.load = function(options) {
  var workingDir = environment.getWorkingDirectory(options.workingDir);

  var envConfig = environmentConfig.load(workingDir);
  var uaaConfig = uaaConfiguration.load(workingDir);

  var routerConfig = {
    appConfig: applicationConfig.loadConfiguration(workingDir, options.xsappConfig || 'xs-app.json',
      envConfig.destinations, uaaConfig.xsappname, true),
    serverPort: environment.getPort(options.port),
    workingDir: workingDir,
    getToken: options.getToken,
    getRouterConfig: options.getRouterConfig,
    uaaConfig: {
      options: uaaConfig
    },
    httpsOptions: options.httpsOptions
  };

  return exports.createRouterConfig(routerConfig, envConfig);
};

module.exports.createRouterConfig = function(routerConfig, envConfig) {
  mergeConfiguration(routerConfig, envConfig);
  configurationUtils.mergePluginsIntoRoutes(routerConfig.appConfig, routerConfig.plugins);
  // should be after plugins are merged with xs-app.json provided routes
  validateUaaConfiguration(routerConfig);
  return routerConfig;
};

function mergeConfiguration(routerConfig, envConfig) {
  routerConfig.sessionTimeout = envConfig.sessionTimeout || routerConfig.appConfig.sessionTimeout;
  delete routerConfig.appConfig.sessionTimeout;

  routerConfig.appConfig.compression = routerConfig.appConfig.compression || {};
  _.merge(routerConfig.appConfig.compression, envConfig.compression);

  routerConfig.uaaConfig.tenantHostPattern = envConfig.tenantHostPattern;

  envConfig = _.omit(envConfig, ['sessionTimeout', 'compression', 'tenantHostPattern']);
  routerConfig = _.merge(routerConfig, envConfig);

  return routerConfig;
}

function validateUaaConfiguration(routerConfig) {
  if (!isUaaCheckRequired(routerConfig.appConfig)) {
    return;
  }

  var uaaConfig = routerConfig.uaaConfig;
  if (Object.keys(uaaConfig.options).length === 0) {
    throw new Error('No UAA service found');
  }
  validators.validateUaaOptions(uaaConfig.options);

  if (uaaConfig.options.tenantmode === 'shared' && !uaaConfig.tenantHostPattern) {
    throw new Error('UAA tenant mode is shared, but environment variable TENANT_HOST_PATTERN is not set');
  }
}

function isUaaCheckRequired(appConfig) {
  return appConfig.authenticationMethod !== 'none' &&
         appConfig.routes.some(function(route) {
           return route.authenticationType !== 'none';
         });
}
