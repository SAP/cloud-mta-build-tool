'use strict';
var xsenv = require('@sap/xsenv');
var xssec = require('@sap/xssec');
var destinationUtils = require('../../lib/utils/destination-utils');

module.exports = {

  replaceUserToken: function (req, cb) {
    if (!req.session || !req.session.user){
      return cb(new Error('Route with backend destination needs oauth authentication'));
    }
    shouldRequestUserExchangeToken (req, function(err, askForToken){
      if (err) {
        return cb(err);
      }
      if (!askForToken) {
        var userExchangeToken = req.session.user.destinationUserExchangeToken.token;
        return cb(null, userExchangeToken);
      }
      var ownUAACredentials = xsenv.cfServiceCredentials({label: 'xsuaa'});
      var externalServiceCredentials = destinationUtils.getDestinationServiceCredentials();
      var routerConfig = req.routerConfig;
      if (routerConfig && routerConfig.getToken) {
        routerConfig.getToken(req, function (err, jwt) {
          if (err) {
            return cb(err);
          }
          getUserExchangeToken(jwt, ownUAACredentials, externalServiceCredentials, cb);
        });
      } else {
        var loginToken = req.session.user.token.accessToken;
        getUserExchangeToken(loginToken, ownUAACredentials, externalServiceCredentials, cb);
      }
    });

  }
};

function getUserExchangeToken(loginToken, ownUAACredentials, externalServiceCredentials, cb){
  try {
    xssec.createSecurityContext(loginToken, ownUAACredentials, function (error, secContext) {
      if (error) {
        cb(error, null);
      } else {
        secContext.requestTokenForClient(Object.assign({}, externalServiceCredentials, {
          url: externalServiceCredentials.url.replace(
            externalServiceCredentials.identityzone,
            secContext.subdomain
          )
        }), null, function (error, userExchangeToken) {
          if (error) {
            cb(error, null);
          } else {
            cb(null, userExchangeToken);
          }
        });
      }
    });
  } catch (err) {
    cb(err);
  }
}


function shouldRequestUserExchangeToken(req, cb){
  var destinationTokensCache = req.session.user.destinationUserExchangeToken;
  if (!destinationTokensCache){
    return cb (null, true);
  }
  // check the expiration of destinationUserExchangeToken
  if (!destinationTokensCache.token || destinationTokensCache.expireDate < Date.now()) {
    return cb (null, true);
  }
  return cb (null, false);
}
