'use strict';

var _ = require('lodash');
var url = require('url');
var logUtil = require('./logger');
var urlUtils = require('../utils/url-utils');

var tracer = logUtil.getTracer(__filename);

exports.resolveUaaConfig = resolveUaaConfig;

exports.getUaaConfig = function(req, cb) {
  var uaaOptions = req.extUaaConfigOptions || req.routerConfig.uaaConfig.options;
  resolveUaaConfig(req, uaaOptions, cb);
};

function resolveUaaConfig(request, uaaOptions, callback) {
  if (uaaOptions.tenantmode !== 'shared') {
    callback(null, uaaOptions);
  } else {
    uaaOptions = _.clone(uaaOptions);
    var requestHost = urlUtils.getAppRouterHost(request);
    var tenantHostPattern = request.routerConfig.uaaConfig.tenantHostPattern;
    callback(null, tenantUaaConfigResolver(uaaOptions, requestHost, tenantHostPattern));
  }
}

function tenantUaaConfigResolver(uaaOptions, requestHost, tenantHostPattern) {
  requestHost = requestHost.split(':')[0]; // remove port

  var tenantHostPatternMatches = tenantHostPattern.exec(requestHost);
  var tenant = tenantHostPatternMatches && tenantHostPatternMatches[1];

  var tenantUaaHost = (tenant ? tenant + '.' : '') + uaaOptions.uaadomain;
  uaaOptions.url = toUrlString(url.parse(uaaOptions.url), tenantUaaHost);

  tracer.debug('Tenant uaaUrl: request host "%s", TENANT_HOST_PATTERN: %s, uaa url "%s"', requestHost, tenantHostPattern, uaaOptions.url);

  return uaaOptions;
}

function toUrlString(parsedUaaUrl, tenantUaaHost) {
  return url.format({
    protocol: parsedUaaUrl.protocol,
    slashes: parsedUaaUrl.slashes,
    auth: parsedUaaUrl.auth,
    hostname: tenantUaaHost,
    port: parsedUaaUrl.port,
    pathname: parsedUaaUrl.pathname,
    search: parsedUaaUrl.search,
    hash: parsedUaaUrl.hash
  });
}
