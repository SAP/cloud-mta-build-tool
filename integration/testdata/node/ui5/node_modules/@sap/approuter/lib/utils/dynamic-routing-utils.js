'use strict';

var request = require('request');
var destinationUtils = require('../../lib/utils/destination-utils');
var NodeCache = require('node-cache');
var businessServiceUtils = require('./business-service-utils');
var tracer = require('./logger').getTracer(__filename);
var logger = require('./logger').getLogger('/Dynamic routing');
var requestTraceEnabled = require('../utils/trace-util').requestTraceEnabled;

var ar;
var configCache;

exports.isDynamicRouting = isDynamicRouting;
exports.initialize = initialize;
exports.getRemoteConfigurationOptions = getRemoteConfigurationOptions;
exports.getRouterConfig = getRouterConfig;
exports.getApplicationKey = getApplicationKey;
exports.getCoreUrl = getCoreUrl;
exports.getFullPathWithoutPrefix = getFullPathWithoutPrefix;
exports.getFullUrl = getFullUrl;
exports.getCacheBusterToken = getCacheBusterToken;
exports.isHtml5RepoService = isHtml5RepoService;

function getRouterConfig(req, callback) {
  var routerConfig;
  if (req.dynamicRouting && req.dynamicRouting.routerConfig) {
    routerConfig = req.dynamicRouting.routerConfig;
  }
  callback(null, routerConfig);
}

function // eslint-disable-next-line
getRemoteConfiguration (req, res, next) {
  var appKey = getApplicationKey(req);
  if (!appKey) {
    return next ();
  }

  getConfigurations(req, appKey, function (err, configuration) {
    if (err) {
      return next(err);
    }
    else {
      var options = {
        xsappConfig: configuration ? configuration.xsapp : 'xs-app.json' ,
        destinations: configuration ? configuration.destinations : null,
        xsappname: configuration ? configuration.xsappname : null
      };
      configuration && storeLogoutDataOnRequest (req, configuration.xsapp);
      ar.createRouterConfig(options, function (err, routerConfig) {
        if (err) {
          return next(err);
        } else {
          req.dynamicRouting = {routerConfig: routerConfig, appKey: (configuration ? appKey : null)};
          return next();
        }
      });
    }
  });
}

function // eslint-disable-next-line
getRemoteConfigurationOptions (req, callback){
  var appKey = getApplicationKey(req);
  if (!appKey) {
    return callback (null);
  }

  if (!configCache) { // initialize is not called in case of extentions
    configCache = new NodeCache({stdTTL: 300, checkperiod: 320});
  }

  getConfigurations(req, appKey, function (err, configuration) {
    if (err) {
      return callback (err);
    }
    else {
      var options = {
        xsappConfig: configuration ? configuration.xsapp : 'xs-app.json',
        destinations: configuration ? configuration.destinations : null,
        xsappname: configuration ? configuration.xsappname : null
      };
      return callback (null, options);
    }
  });
}

function getConfigurations (req, appKey, callback){

  var config = configCache.get(appKey.entireKey);
  if (config){
    return callback (null, config);
  }

  getVcapServicesData (req, appKey, function (err, vcapServicesData) {
    if (err) {
      return callback (err);
    }
    else if (!vcapServicesData) {
      return callback (null, null);
    }
    request.get(vcapServicesData.requestOptions, function onResponse(err, res, body) {
      if (err || !res || !res.statusCode) {
        return callback('Error while retrieving xsApp configuration');
      }
      else if (res.statusCode === 404) {
        return callback('Application does not have xs-app.json');
      }
      else if (res.statusCode === 503) {
        tracer.info('Application %s does not exist', appKey.entireKey);
        return callback(null, null);
      }
      else if (res.statusCode !== 200) {
        return callback('Error while retrieving xsApp configuration');
      }
      try {
        config = {};
        config.xsapp = JSON.parse (body);
      }
      catch (e) {
        return callback('xsApp configuration is invalid');
      }
      if (vcapServicesData.xsappname){
        config.xsappname = vcapServicesData.xsappname;
      }
      destinationUtils.getDestinationsAsync (req, config.xsapp, function (err, destinations) {
        if (err) {
          return callback(err);
        }
        if (destinations && destinations.length > 0) {
          config.destinations = destinations;
        }
        var success = configCache.set(appKey.entireKey, config);
        if (!success){
          return callback('Failed to set configuration cache');
        }
        callback (null, config);
      });
    });
  });
}

function storeLogoutDataOnRequest (req, xsapp) {
  if (!xsapp.destinations && !xsapp.services) {
    return;
  }

  req.toBeCachedOnSession = req.toBeCachedOnSession ? req.toBeCachedOnSession : {};
  req.toBeCachedOnSession.user = req.toBeCachedOnSession.user ? req.toBeCachedOnSession.user : {};
  req.toBeCachedOnSession.user.logout = {};

  if (xsapp.destinations) {
    req.toBeCachedOnSession.user.logout.destinations = xsapp.destinations;
  }
  if (xsapp.services) {
    req.toBeCachedOnSession.user.logout.services = xsapp.services;
  }
}

function getVcapServicesData (req, appKey, cb) {

  var html5RepoCredentials;
  var bsCredentials;

  if (!req.app || !req.app.html5AppsRepoToken || !req.app.html5AppsRepoToken.accessToken) {
    return cb ('Missing html5AppsRepo token');
  }

  html5RepoCredentials = businessServiceUtils.getCredentials('html5-apps-repo-rt');

  if (!html5RepoCredentials){
    return cb ('Error during loading of html5-apps-repo-rt credentials. ' +
          'Verify html5-apps-repo service with plan app-runtime is bound');
  }

  if (!html5RepoCredentials || !html5RepoCredentials.uri) {
    return cb ('Invalid credentials for html5-apps-repo service with plan app-runtime');
  }

  if (appKey.appPrefix) {

    bsCredentials = businessServiceUtils.getCredentials(appKey.appPrefix, true);

    if (!bsCredentials){
      logger.warning('Service Tag %s is unknown', appKey.appPrefix);
      return cb (null, null);
    }

    if (!bsCredentials || !bsCredentials['html5-apps-repo']) {
      return cb ('Invalid VCAP credentials for business service: html5-apps-repo part is missing');
    }
    if (!bsCredentials['html5-apps-repo']['app_host_id']) {
      return cb ('Invalid VCAP credentials for business service: app_host_id is missing');
    }
  }

  var vcapServicesData = {};
  var requestOptions = {};

  requestOptions.url = html5RepoCredentials.uri + '/' + appKey.appKeyWithoutPrefix + '/xs-app.json';
  requestOptions.headers = {};
  requestOptions.headers.accept = 'application/json;charset=utf-8';
  requestOptions.headers.authorization = 'Bearer ' + req.app.html5AppsRepoToken.accessToken;

  if (bsCredentials){
    if (bsCredentials['html5-apps-repo'] && bsCredentials['html5-apps-repo']['app_host_id']) {
      requestOptions.headers['x-app-host-id'] = bsCredentials['html5-apps-repo']['app_host_id'];
    }
    if (bsCredentials['uaa'] && bsCredentials['uaa']['xsappname']) {
      vcapServicesData.xsappname = bsCredentials['uaa']['xsappname'];
    }
    else {
      logger.warning('\'xsappname\' property not found in business service - UAA configuration');
    }
  }
  vcapServicesData.requestOptions = requestOptions;

  cb (null, vcapServicesData);
}

function getCacheBusterToken(req){
  var suspectSegment = req.url.split('/')[2];
  var tokenRegEx = /^~(.*)~$/;
  if (tokenRegEx.test(suspectSegment)){
    return suspectSegment;
  }
  return null;
}

function getApplicationKey (req) {
  var appKey = {};
  var parts;

  if (req.dynamicRouting && req.dynamicRouting.hasOwnProperty ('appKey')) {
    return req.dynamicRouting.appKey;
  }

  appKey.entireKey = req.url.split('/')[1];
  if (requestTraceEnabled) {
    tracer.info('Application key = %s', appKey.entireKey);
  }
  if (!appKey.entireKey) {
    return null;
  }

  var appVersionRegex = new RegExp('-(\\d+\\.){2}(\\d+)$');
  var match = appKey.entireKey.match (appVersionRegex);
  if (match && match[0]) {
    appKey.appVersion = match[0].slice(1);
    appKey.appName = appKey.entireKey.replace (match[0], '');
  }
  else {
    appKey.appVersion = null;
    appKey.appName = appKey.entireKey;
  }

  parts = appKey.appName.split('.');
  if (!parts || parts.length < 2) {
    appKey.appPrefix = null;
  }
  else {
    appKey.appPrefix = parts[0];
  }

  if (appKey.appPrefix) {
    appKey.appNameWithoutPrefix = parts[1];
  }
  else {
    appKey.appNameWithoutPrefix = appKey.appName;
  }

  if (appKey.appVersion) {
    appKey.appKeyWithoutPrefix = appKey.appNameWithoutPrefix + '-' + appKey.appVersion;
  } else {
    appKey.appKeyWithoutPrefix = appKey.appNameWithoutPrefix;
  }

  return appKey;
}

function isDynamicRouting () {
  var html5RepoCredentials = businessServiceUtils.getCredentials('html5-apps-repo-rt');

  return html5RepoCredentials ? true : false;
}

function isHtml5RepoService(service){
  return service === 'html5-apps-repo-rt';
}

function initialize (approuter){
  ar = approuter;
  configCache = new NodeCache({stdTTL: 300, checkperiod: 320});
  return getRemoteConfiguration;
}

function getCoreUrl (req) {
  if (!isDynamicRouting ()) {
    return req.url;
  }
  var appKey = getApplicationKey(req);
  if (!appKey){
    return req.url;
  }
  else {
    var urlAfterReplace = req.url.replace('/' + appKey.entireKey, '');
    var cacheBusterToken = getCacheBusterToken(req);
    urlAfterReplace = (cacheBusterToken) ? urlAfterReplace.replace('/' + cacheBusterToken, '') : urlAfterReplace;
    return (urlAfterReplace ? urlAfterReplace : '/');
  }
}

function getFullPathWithoutPrefix (req, path) {
  if (!isDynamicRouting ()) {
    return path;
  }

  var appKey = getApplicationKey(req);
  if (!appKey){
    return path;
  }
  else {
    return '/' + appKey.appKeyWithoutPrefix + path;
  }
}

function getFullUrl (req, url) {
  if (!isDynamicRouting ()) {
    return url;
  }

  var appKey = getApplicationKey(req);
  if (!appKey){
    return url;
  }
  else {
    return '/' + appKey.entireKey + url;
  }
}
